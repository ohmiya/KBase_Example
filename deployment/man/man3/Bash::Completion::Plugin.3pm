.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bash::Completion::Plugin 3pm"
.TH Bash::Completion::Plugin 3pm "2011-10-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bash::Completion::Plugin \- base class for Bash::Completion plugins
.SH "VERSION"
.IX Header "VERSION"
version 0.008
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    ## Example plugin for xpto command
\&    package Bash::Completion::Plugin::XPTO;
\&    
\&    use strict;
\&    use warnings;
\&    use parent \*(AqBash::Completion::Plugin\*(Aq;
\&    use Bash::Completion::Utils qw( command_in_path );
\&    
\&    sub should_activate {
\&      return [grep { command_in_path(_) } (\*(Aqxpto\*(Aq)];
\&    }
\&    
\&    
\&    ## Optionally, for full control of the generated bash code
\&    sub generate_bash_setup {
\&      return q{complete \-C \*(Aqbash\-complete complete XPTO\*(Aq xpto};
\&    }
\&    
\&    ## Use plugin arguments
\&    sub generate_bash_setup {
\&      return q{complete \-C \*(Aqbash\-complete complete XPTO arg1 arg2 arg3\*(Aq xpto};
\&    }
\&    ## $plugin\->args will have [\*(Aqarg1\*(Aq, \*(Aqarg2\*(Aq, \*(Aqarg3\*(Aq]
\&    
\&    
\&    sub complete {
\&      my ($self, $r) = @_;
\&    
\&      my @options = (\*(Aq\-h\*(Aq, \*(Aq\-\-help\*(Aq);
\&      $r\->candidates(prefix_match($r\->word, @options));
\&    }
\&    1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&    WARNING: the most important class for Plugin writers is the Request
\&    class. Please note that the Request class interface is Alpha\-quality
\&    software, and I will update it before 1.0.
.Ve
.PP
A base class for Bash::Completion plugins that provides the default
implementations for the required plugin methods.
.PP
See the \*(L"\s-1SYNOPSIS\*(R"\s0 for an example of a plugin.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "args"
.IX Subsection "args"
An list reference with plugin arguments.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
A basic plugin constructor. Accepts a list of key/values. Accepted keys:
.IP "args" 4
.IX Item "args"
A list reference with parameters to this plugin.
.SS "should_activate"
.IX Subsection "should_activate"
The method \f(CW\*(C`should_activate()\*(C'\fR is used by the automatic setup of
completion rules in the .bashrc. It should return a reference to a list
of commands that the plugin is can complete.
.PP
If this method returns a reference to an empty list (the default), the
plugin will not be used.
.PP
A common implementation of this method is to check the \s-1PATH\s0 for the
command we want to provide completion, and return the com only if that
command is found.
.PP
The Bash::Completion::Utils library has a \f(CW\*(C`command_in_path()\*(C'\fR that
can be pretty useful here.
.PP
For example:
.PP
.Vb 3
\&    sub should_activate {
\&      return [grep { command_in_path($_) } qw( perldoc pod )];
\&    }
.Ve
.SS "generate_bash_setup"
.IX Subsection "generate_bash_setup"
This method receives the list of commands that where found by
\&\*(L"should_activate\*(R" and must return a list of options to use when
creating the bash \f(CW\*(C`complete\*(C'\fR command.
.PP
For example, if a plugin returns \f(CW\*(C`[qw( nospace default )]\*(C'\fR, the
following bash code is generated:
.PP
.Vb 1
\&    complete \-C \*(Aqbash\-complete complete PluginName\*(Aq \-o nospace \-o default command
.Ve
.PP
By default this method returns a reference to an empty list.
.PP
Alternatively, and for complete control, you can return a string with
the entire bash code to activate the plugin.
.SS "complete"
.IX Subsection "complete"
The plugin completion logic. The class Bash::Completion will call
this method with a Bash::Completion::Request object, and your code
should use the Request \f(CW\*(C`candidates()\*(C'\fR method to set the possible
completions.
.PP
The Bash::Completion::Utils library has two functions,
\&\f(CW\*(C`match_perl_module()\*(C'\fR and \f(CW\*(C`prefix_math()\*(C'\fR that can be pretty
useful here.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pedro Melo <melo@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2011 by Pedro Melo.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
