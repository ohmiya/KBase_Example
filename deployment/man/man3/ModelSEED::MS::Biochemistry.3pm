.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ModelSEED::MS::Biochemistry 3pm"
.TH ModelSEED::MS::Biochemistry 3pm "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
\fIprintDBFiles\fR
.IX Subsection "printDBFiles"
.PP
.Vb 4
\&        $biochemistry\->printDBFiles(
\&                forceprint => boolean,
\&        directory  => string,
\&        );
.Ve
.PP
Creates files with biochemistry data for use by the MFAToolkit.
\&\f(CW\*(C`forceprint\*(C'\fR is a boolean which, if true, will cause the function
to always print the files, overwriting existing files if they exist.
\&\f(CW\*(C`directory\*(C'\fR is the directory to save the tables into.
.PP
\fImakeDBModel Definition: ModelSEED::MS::ModelReaction = ModelSEED::MS::Biochemistry\->makeDBModel({ balancedOnly => 1, gapfillingFormulation => undef annotation_uuid => \*(L"00000000\-0000\-0000\-0000\-000000000000\*(R", mapping_uuid => \*(L"00000000\-0000\-0000\-0000\-000000000000\*(R", }); Description: Creates a model that has every reaction instance in the database that pass through the specified filters\fR
.IX Subsection "makeDBModel Definition: ModelSEED::MS::ModelReaction = ModelSEED::MS::Biochemistry->makeDBModel({ balancedOnly => 1, gapfillingFormulation => undef annotation_uuid => 00000000-0000-0000-0000-000000000000, mapping_uuid => 00000000-0000-0000-0000-000000000000, }); Description: Creates a model that has every reaction instance in the database that pass through the specified filters"
.PP
\fIexport\fR
.IX Subsection "export"
.PP
Definition:
	string = ModelSEED::MS::Biochemistry\->export({
		format => optfluxmedia/readable/html/json
	});
Description:
	Exports biochemistry data to the specified format.
.PP
\fIfindCreateEquivalentCompartment Definition: void ModelSEED::MS::Biochemistry\->findCreateEquivalentCompartment({ compartment => ModelSEED::MS::Compartment(\s-1REQ\s0), create => 0/1(1) }); Description: Search for an equivalent comparment for the input biochemistry compartment\fR
.IX Subsection "findCreateEquivalentCompartment Definition: void ModelSEED::MS::Biochemistry->findCreateEquivalentCompartment({ compartment => ModelSEED::MS::Compartment(REQ), create => 0/1(1) }); Description: Search for an equivalent comparment for the input biochemistry compartment"
.PP
\fIfindCreateEquivalentCompound Definition: void ModelSEED::MS::Biochemistry\->findCreateEquivalentCompound({ compound => ModelSEED::MS::Compound(\s-1REQ\s0), create => 0/1(1) }); Description: Search for an equivalent compound for the input biochemistry compound\fR
.IX Subsection "findCreateEquivalentCompound Definition: void ModelSEED::MS::Biochemistry->findCreateEquivalentCompound({ compound => ModelSEED::MS::Compound(REQ), create => 0/1(1) }); Description: Search for an equivalent compound for the input biochemistry compound"
.PP
\fIfindCreateEquivalentReaction Definition: void ModelSEED::MS::Biochemistry\->findCreateEquivalentReaction({ reaction => ModelSEED::MS::Reaction(\s-1REQ\s0), create => 0/1(1) }); Description: Search for an equivalent reaction for the input biochemistry reaction\fR
.IX Subsection "findCreateEquivalentReaction Definition: void ModelSEED::MS::Biochemistry->findCreateEquivalentReaction({ reaction => ModelSEED::MS::Reaction(REQ), create => 0/1(1) }); Description: Search for an equivalent reaction for the input biochemistry reaction"
.PP
\fIvalidate Definition: void ModelSEED::MS::Biochemistry\->\fIvalidate()\fI; Description: This command runs a series of tests on the biochemistry data to ensure that it is valid\fR
.IX Subsection "validate Definition: void ModelSEED::MS::Biochemistry->validate(); Description: This command runs a series of tests on the biochemistry data to ensure that it is valid"
.PP
\fIfindReactionsWithReagent Definition: void ModelSEED::MS::Biochemistry\->\fIfindReactionsWithReagent()\fI; Description: This command returns an arrayref of reactions that contain a specificed reagent uuid\fR
.IX Subsection "findReactionsWithReagent Definition: void ModelSEED::MS::Biochemistry->findReactionsWithReagent(); Description: This command returns an arrayref of reactions that contain a specificed reagent uuid"
.PP
\fIaddCompartmentFromHash Definition: ModelSEED::MS::Compartment = ModelSEED::MS::Biochemistry\->addCompartmentFromHash({[]}); Description: This command adds a single compartment from an input hash\fR
.IX Subsection "addCompartmentFromHash Definition: ModelSEED::MS::Compartment = ModelSEED::MS::Biochemistry->addCompartmentFromHash({[]}); Description: This command adds a single compartment from an input hash"
.PP
\fIaddCueFromHash Definition: ModelSEED::MS::Cue = ModelSEED::MS::Biochemistry\->addCueFromHash({[]}); Description: This command adds a single structural cue from an input hash\fR
.IX Subsection "addCueFromHash Definition: ModelSEED::MS::Cue = ModelSEED::MS::Biochemistry->addCueFromHash({[]}); Description: This command adds a single structural cue from an input hash"
.PP
\fIaddCompoundFromHash Definition: ModelSEED::MS::Compound = ModelSEED::MS::Biochemistry\->addCompoundFromHash({[]}); Description: This command adds a single compound from an input hash\fR
.IX Subsection "addCompoundFromHash Definition: ModelSEED::MS::Compound = ModelSEED::MS::Biochemistry->addCompoundFromHash({[]}); Description: This command adds a single compound from an input hash"
.PP
\fIaddReactionFromHash Definition: ModelSEED::MS::Compound = ModelSEED::MS::Biochemistry\->addReactionFromHash({[]}); Description: This command adds a single reaction from an input hash\fR
.IX Subsection "addReactionFromHash Definition: ModelSEED::MS::Compound = ModelSEED::MS::Biochemistry->addReactionFromHash({[]}); Description: This command adds a single reaction from an input hash"
.PP
\fIsearchForStimuli\fR
.IX Subsection "searchForStimuli"
.PP
Definition:
	ModelSEED::MS::Stimuli = ModelSEED::MS::Biochemistry\->searchForStimuli(string id);
Description:
	Searches for the input Stimuli in the biochemistry
.PP
\fIsearchForCompound Definition: ModelSEED::MS::Compound = ModelSEED::MS::Biochemistry\->searchForCompound(string); Description: Searches for a compound by \s-1ID,\s0 name, or alias.\fR
.IX Subsection "searchForCompound Definition: ModelSEED::MS::Compound = ModelSEED::MS::Biochemistry->searchForCompound(string); Description: Searches for a compound by ID, name, or alias."
.PP
\fIsearchForReaction Definition: ModelSEED::MS::Reaction = ModelSEED::MS::Biochemistry\->searchForReaction(string); Description: Searches for a reaction by \s-1ID,\s0 name, or alias.\fR
.IX Subsection "searchForReaction Definition: ModelSEED::MS::Reaction = ModelSEED::MS::Biochemistry->searchForReaction(string); Description: Searches for a reaction by ID, name, or alias."
.PP
\fIsearchForCompartment Definition: ModelSEED::MS::Compartment = ModelSEED::MS::Biochemistry\->searchForCompartment(string); Description: Searches for a compartment by \s-1ID,\s0 name, or alias.\fR
.IX Subsection "searchForCompartment Definition: ModelSEED::MS::Compartment = ModelSEED::MS::Biochemistry->searchForCompartment(string); Description: Searches for a compartment by ID, name, or alias."
.PP
\fImergeBiochemistry Definition: void mergeBiochemistry(ModelSEED::MS::Biochemistry,{}); Description: This command merges the input biochemistry into the current biochemistry\fR
.IX Subsection "mergeBiochemistry Definition: void mergeBiochemistry(ModelSEED::MS::Biochemistry,{}); Description: This command merges the input biochemistry into the current biochemistry"
.PP
\fIcheckForDuplicateAliasSet Definition: void checkForDuplicateAliasSet(ModelSEED::MS::AliasSet); Description: This command checks if the input aliasSet is a duplicate for an existing aliasSet\fR
.IX Subsection "checkForDuplicateAliasSet Definition: void checkForDuplicateAliasSet(ModelSEED::MS::AliasSet); Description: This command checks if the input aliasSet is a duplicate for an existing aliasSet"
.PP
\fIcheckForDuplicateReactionSet Definition: void checkForDuplicateReactionSet(ModelSEED::MS::Media); Description: This command checks if the input media is a duplicate for an existing media\fR
.IX Subsection "checkForDuplicateReactionSet Definition: void checkForDuplicateReactionSet(ModelSEED::MS::Media); Description: This command checks if the input media is a duplicate for an existing media"
.PP
\fIcheckForDuplicateCompoundSet Definition: void checkForDuplicateCompoundSet(ModelSEED::MS::Media); Description: This command checks if the input media is a duplicate for an existing media\fR
.IX Subsection "checkForDuplicateCompoundSet Definition: void checkForDuplicateCompoundSet(ModelSEED::MS::Media); Description: This command checks if the input media is a duplicate for an existing media"
.PP
\fIcheckForDuplicateMedia Definition: void checkForDuplicateMedia(ModelSEED::MS::Media); Description: This command checks if the input media is a duplicate for an existing media\fR
.IX Subsection "checkForDuplicateMedia Definition: void checkForDuplicateMedia(ModelSEED::MS::Media); Description: This command checks if the input media is a duplicate for an existing media"
.PP
\fIcheckForDuplicateReaction Definition: void checkForDuplicateReaction(ModelSEED::MS::Reaction); Description: This command checks if the input reaction is a duplicate for an existing reaction\fR
.IX Subsection "checkForDuplicateReaction Definition: void checkForDuplicateReaction(ModelSEED::MS::Reaction); Description: This command checks if the input reaction is a duplicate for an existing reaction"
.PP
\fIcheckForDuplicateCompound Definition: void checkForDuplicateCompound(ModelSEED::MS::Compound); Description: This command checks if the input compound is a duplicate for an existing compound\fR
.IX Subsection "checkForDuplicateCompound Definition: void checkForDuplicateCompound(ModelSEED::MS::Compound); Description: This command checks if the input compound is a duplicate for an existing compound"
.PP
\fIsortObjectsByNamespace Definition: void sortObjectsByNamespace(string,arrayref,arrayref); Description: This command re-sorts objects according to whether they have aliases. Only works for compounds and reactions\fR
.IX Subsection "sortObjectsByNamespace Definition: void sortObjectsByNamespace(string,arrayref,arrayref); Description: This command re-sorts objects according to whether they have aliases. Only works for compounds and reactions"
.PP
\fIcheckForDuplicateCompartment Definition: void checkForDuplicateCompartment(ModelSEED::MS::Cue); Description: This command checks if the input compartment is a duplicate for an existing compartment\fR
.IX Subsection "checkForDuplicateCompartment Definition: void checkForDuplicateCompartment(ModelSEED::MS::Cue); Description: This command checks if the input compartment is a duplicate for an existing compartment"
.PP
\fIcheckForDuplicateCue Definition: void checkForDuplicateCue(ModelSEED::MS::Cue); Description: This command checks if the input cue is a duplicate for an existing cue\fR
.IX Subsection "checkForDuplicateCue Definition: void checkForDuplicateCue(ModelSEED::MS::Cue); Description: This command checks if the input cue is a duplicate for an existing cue"
