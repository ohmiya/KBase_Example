.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ModelSEED::Database 3pm"
.TH ModelSEED::Database 3pm "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "ModelSEED::Database"
.IX Header "ModelSEED::Database"
An abstract role / interface for database drivers.
.SS "Methods"
.IX Subsection "Methods"
\fIhas_data\fR
.IX Subsection "has_data"
.PP
.Vb 1
\&    $bool = $db\->has_data(ref, auth);
.Ve
.PP
\fIget_data\fR
.IX Subsection "get_data"
.PP
.Vb 1
\&    $obj = $db\->get_data(ref, auth);
.Ve
.PP
\fIget_data_collection\fR
.IX Subsection "get_data_collection"
.PP
.Vb 1
\&    $collection = $db\->get_data_collection(ref, auth);
.Ve
.PP
\fIget_data_collection_iterator\fR
.IX Subsection "get_data_collection_iterator"
.PP
.Vb 1
\&    $iterator = $db\->get_data_collection_itorator(ref, auth);
.Ve
.PP
\fIsave_data\fR
.IX Subsection "save_data"
.PP
.Vb 1
\&    $ref = $db\->save_data(ref, data, auth, config);
.Ve
.PP
Where config is a hash that currently accepts one parameter:
.IP "is_merge" 4
.IX Item "is_merge"
This is a boolean value that, if true, results in the save operation
not overwriting the ancestor_uuids field in the object. If it is
false or not present, the ancestor_uuids field will be overwritten
with the current object's uuid if that object already exists in the
data store.
.PP
\fIsave_data_collection\fR
.IX Subsection "save_data_collection"
.PP
.Vb 1
\&    $bool = save_data_collection(ref, collection, auth);
.Ve
.PP
\fIdelete_data\fR
.IX Subsection "delete_data"
.PP
.Vb 1
\&    $count = $db\->delete_object(ref, auth);
.Ve
.PP
\fIdelete_collection\fR
.IX Subsection "delete_collection"
.PP
.Vb 1
\&    $count = $db\->delete_object(ref, auth);
.Ve
.PP
\fIfind_objects\fR
.IX Subsection "find_objects"
.PP
.Vb 1
\&    ([ids]) = $db\->find_objects(ref, query, auth);
.Ve
.PP
Allows you to query for objects based on the metadata will use query
syntax similar to MongoDB.
.PP
Uses MongoDB syntax like here:
<http://search.cpan.org/~kristina/MongoDB/lib/MongoDB/Tutorial.pod#Queries>
<http://www.mongodb.org/display/DOCS/Advanced+Queries>
.SS "Alias Functions"
.IX Subsection "Alias Functions"
These functions manage aliases, which are special pointers to
objects. These pointers have viewing permissions and can only be
moved to a different object by their owner. Alias strings have the
form of \*(L"username/arbitraryString\*(R" and are used in place of uuids
in some specific objects (biochemistry, mapping and model for now).
So a reference to a biochemistry would look like
\&\f(CW\*(C`biochemistry/chenry/main\*(C'\fR.
.PP
In these functions:
.ie n .IP """ref"" is a ModelSEED::Reference" 4
.el .IP "\f(CWref\fR is a ModelSEED::Reference" 4
.IX Item "ref is a ModelSEED::Reference"
.PD 0
.ie n .IP """auth"" is a ModelSEED::Auth" 4
.el .IP "\f(CWauth\fR is a ModelSEED::Auth" 4
.IX Item "auth is a ModelSEED::Auth"
.ie n .IP """arbitraryString"" is the free-form portion of the alias" 4
.el .IP "\f(CWarbitraryString\fR is the free-form portion of the alias" 4
.IX Item "arbitraryString is the free-form portion of the alias"
.ie n .IP """viewerUsername"" is a username" 4
.el .IP "\f(CWviewerUsername\fR is a username" 4
.IX Item "viewerUsername is a username"
.PD
.PP
\fIget_aliases\fR
.IX Subsection "get_aliases"
.PP
.Vb 1
\&    $arrayRef = $db\->get_aliases(query, auth)
.Ve
.PP
Query for aliases. The query object is a HashRef that may contain
the following keys: type, owner, alias, uuid.  The return value is
an array ref of alias objects that have the following structure:
.PP
.Vb 6
\&    {
\&        type  => $string,
\&        owner => $string,
\&        alias => $string,
\&        uuid  => $uuid,
\&    }
.Ve
.PP
\fIupdate_alias\fR
.IX Subsection "update_alias"
.PP
.Vb 1
\&    $bool = $db\->update_alias(ref, uuid, auth)
.Ve
.PP
\fIadd_viewer\fR
.IX Subsection "add_viewer"
.PP
.Vb 1
\&    $bool = $db\->add_viewer(ref, viewerUsername, auth)
.Ve
.PP
\fIremove_viewer\fR
.IX Subsection "remove_viewer"
.PP
.Vb 1
\&    $bool = $db\->remove_viewer(ref, viewerUsername, auth)
.Ve
.PP
\fIset_public\fR
.IX Subsection "set_public"
.PP
.Vb 1
\&    $bool = $db\->set_public(ref, boolean, auth)
.Ve
.SS "Ancestor and Decendant Functions"
.IX Subsection "Ancestor and Decendant Functions"
These functions provide access to the ancestor and decnendant
information on provenance objects. Each object stores a reference
to its direct parents through the \f(CW\*(C`{ ancestor_uuids }\*(C'\fR array.
However, to access ancestors further back, one must walk through
the database at least once. These functions do so in a reasonably
efficient manner.
.PP
\fIancestors\fR
.IX Subsection "ancestors"
.PP
.Vb 1
\&    \e@ = $db\->ancestors(ref, auth)
.Ve
.PP
Return an array-ref of ancestor uuids that are the complete list
of ancestors (parents, grandparents, etc.) for a reference.
.PP
\fIancestor_graph\fR
.IX Subsection "ancestor_graph"
.PP
.Vb 1
\&    \e% = $db\->ancestor_graph(ref, auth)
.Ve
.PP
Return a hash-ref of uuid to array-ref of parent uuids for each
object that is an ancestor of the current object. This hash includes
the current object uuid as a key. So for an object with no parents,
and therefore no further ancestors, the graph would be:
.PP
.Vb 1
\&    { $uuid => [] }
.Ve
.PP
And for an object with a parent \f(CW$uuid2\fR:
.PP
.Vb 1
\&    { $uuid => [ $uuid2 ], $uuid2 => [] }
.Ve
.PP
\fIdescendants\fR
.IX Subsection "descendants"
.PP
.Vb 1
\&    \e@ = $db\->descendants(ref, auth)
.Ve
.PP
Return an array-ref of descendant object uuids.
.PP
\fIdescendant_graph\fR
.IX Subsection "descendant_graph"
.PP
.Vb 1
\&    \e% = $db\->descendant_graph(ref, auth)
.Ve
.PP
Return a hash-ref of uuid to array-ref of parent uuids for each
object that is a descendant of the current object. This hash includes
the current object uuid as a key.
.SS "Database Setup and Teardown Functions"
.IX Subsection "Database Setup and Teardown Functions"
\fIinit_database\fR
.IX Subsection "init_database"
.PP
Called with no arguments to initialize the database. This should
be called once before running any other database functions. This
function is responsible for one-time operations like creating
metadata, setting up indexes, etc. Returns true if successful,
otherwise false.
.PP
\fIdelete_database\fR
.IX Subsection "delete_database"
.PP
.Vb 1
\&    \e$ = $db\->delete_database(\e%);
.Ve
.PP
This function does clean-up operations to remove the database from
the system, returning true if it succeeded, false otherwise.  The
function accepts a hash reference that currently supports one option:
.IP "keep_data" 4
.IX Item "keep_data"
This is a boolean indicating that the data stored should not be
deleted. If this is supplied and true, the delete_database function
should preserve the data objects currently stored. This option is
useful if you need to re-initialize a database for whatever reason.
