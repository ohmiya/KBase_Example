.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ModelSEED::MS::IndexedObject 3pm"
.TH ModelSEED::MS::IndexedObject 3pm "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "ModelSEED::MS::IndexedObject"
.IX Header "ModelSEED::MS::IndexedObject"
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
\fIadd\fR
.IX Subsection "add"
.PP
.Vb 1
\&    $obj\->add($attribute, $subobject);
.Ve
.PP
Adds a sub-object \f(CW$subobject\fR to the Indexed Object, updating
existing indexes to match the new object data.  \f(CW$attribute\fR is a
string attribute name within the object.  \f(CW$subobject\fR can be
either a plain perl hash or a \f(CW\*(C`ModelSEED::MS\*(C'\fR object.
.PP
\fIaddAlias\fR
.IX Subsection "addAlias"
.PP
.Vb 1
\&    $obj\->addAlias(\e%config);
.Ve
.PP
Add an alias to a AliasSet. Config is a hash reference that requires
the following parameters:
.IP "attribute" 4
.IX Item "attribute"
The attribute that the aliases should be listed for, e.g.
\&\*(L"compounds\*(R", \*(L"reactions\*(R"
.IP "aliasName" 4
.IX Item "aliasName"
The name of the alias class. For example, the Kyoto Encyclopedia
of Genes and Genomes (\s-1KEGG\s0) reaction aliases are listed under \*(L"\s-1KEGG\*(R"\s0
.IP "alias" 4
.IX Item "alias"
A string.
.IP "uuid" 4
.IX Item "uuid"
The uuid of the object to create an alias for.
.IP "source" 4
.IX Item "source"
This is optional, a string that is the source name for the object.
This defaults to \*(L"aliasName\*(R" if not supplied.
.PP
\fIgetObjectByAlias\fR
.IX Subsection "getObjectByAlias"
.PP
.Vb 2
\&        $aliased = $obj\->getObjectByAlias($attribute,$alias,$aliasSet);
\&    $aliased = $obj\->getObjectByAlias("compounds", "cpd01234", "ModelSEED");
.Ve
.PP
Return the first object that is matched by the provided alias.
\&\f(CW$attribute\fR is the attribute name for which the alias would apply,
e.g. \*(L"compounds\*(R", \*(L"roles\*(R", or \*(L"reactions\*(R".
\&\f(CW$aliasName\fR is the class of alias to look for, e.g. \*(L"\s-1KEGG\*(R".
\&\s0\f(CW$alias\fR is the string to look for.
.PP
\fIgetObjectsByAlias\fR
.IX Subsection "getObjectsByAlias"
.PP
.Vb 1
\&        \e@aliased = $obj\->getObjectByAlias($attribute,$alias,$aliasName);
.Ve
.PP
Same as getObjectsByAlias, but will return an array-ref of all
aliases found.
.PP
\fIgetObject\fR
.IX Subsection "getObject"
.PP
.Vb 1
\&    $found = $obj\->getObject($attribute, $uuid)
.Ve
.PP
Find an object that matches the provided \f(CW$uuid\fR.  \f(CW$attribute\fR
is the attribute name for which the object would be under. For
ModelSEED::MS::Biochemistry this might be: \*(L"reactions\*(R", \*(L"compounds\*(R",
\&\*(L"media\*(R", etc.
.PP
If no object is found, return undef.
.PP
\fIgetObjects\fR
.IX Subsection "getObjects"
.PP
.Vb 1
\&    \e@found = $obj\->getObjects($attribute, $uuids)
.Ve
.PP
Same as getObject, but \f(CW$uuids\fR is an array ref of UUIDs and this
function returns an array ref of objects. If no objects are found,
return an empty list.
.PP
\fIqueryObject\fR
.IX Subsection "queryObject"
.PP
.Vb 1
\&    $found = $obj\->queryObject($attribute, \e%query);
.Ve
.PP
Query for the first object that matches a specific set of attributes.
\&\f(CW$attribute\fR follows the same format as above, the query is a hash
reference of attributes to values in the object that we are looking
for.
.PP
\fIqueryObjects\fR
.IX Subsection "queryObjects"
.PP
.Vb 1
\&    \e@found = $obj\->queryObjects($attribute, \e%query);
.Ve
.PP
Same as queryObject except it returns all objects that match the
query parameters, not just the first one. This is returned as an
array reference.
