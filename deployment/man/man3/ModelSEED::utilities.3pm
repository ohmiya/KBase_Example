.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ModelSEED::utilities 3pm"
.TH ModelSEED::utilities 3pm "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "ModelSEED::utilities"
.IX Header "ModelSEED::utilities"
Basic utility functions in the ModelSEED
.SS "Argument Processing"
.IX Subsection "Argument Processing"
\fIargs\fR
.IX Subsection "args"
.PP
.Vb 1
\&    $args = args( $required, $optional, ... );
.Ve
.PP
Process arguments for a given function. \f(CW\*(C`required\*(C'\fR is an ArrayRef
of strings that correspond to required arguments for the function.
\&\f(CW\*(C`optional\*(C'\fR is a HashRef that defines arguments with default values.
The remaining values are the arguments to the function. E.g.
.PP
.Vb 12
\&    sub function {
\&        my $self = shift;
\&        my $args = args ( [ "name" ], { phone => "867\-5309" }, @_ );
\&        return $args;
\&    }
\&    # The following calls will work
\&    print Dumper function(name => "bob", phone => "555\-555\-5555");
\&    # Prints { name => "bob", phone => "555\-555\-5555" }
\&    print Dumper function( { name => "bob" } );
\&    # Prints { name => "bob", phone => "867\-5309" }
\&    print Dumper function();
\&    # dies, name must be defined...
.Ve
.SS "Warnings"
.IX Subsection "Warnings"
\fIerror\fR
.IX Subsection "error"
.PP
.Vb 1
\&    error("String");
.Ve
.PP
Confesses an error to stderr.
.SS "Printing Verbosely"
.IX Subsection "Printing Verbosely"
There are two functions in this package that control the printing of verbose
messages: \f(CW\*(C`verbose\*(C'\fR and \f(CW\*(C`set_verbose\*(C'\fR.
.PP
\fIverbose\fR
.IX Subsection "verbose"
.PP
.Vb 1
\&    $rtv = verbose("string one", "string two");
.Ve
.PP
Call with a list of strings to print a message if the verbose flag has been
set. If the list of strings is empty, nothing is printed. Returns true if
the verbose flag is set. Otherwise returns undef.
.PP
\fIset_verbose\fR
.IX Subsection "set_verbose"
.PP
.Vb 1
\&    $rtv = set_verbose($arg);
.Ve
.PP
Calling with a \s-1GLOB\s0 reference sets the filehandle that \f(CW\*(C`verbose()\*(C'\fR
prints to that reference and sets the verbose flag. Calling with
the value 1 sets the verbose flag and causes \f(CW\*(C`verbose()\*(C'\fR to print
to \f(CW\*(C`STDERR\*(C'\fR.  Calling with any other unsets the verbose flag.
Returns the \s-1GLOB\s0 Reference that \f(CW\*(C`verbose()\*(C'\fR will print to if the
verbose flag is set. Otherwise it returns undef.
.PP
\fIidServer\fR
.IX Subsection "idServer"
.PP
Definition:
	Bio::KBase::IDServer::Client = \fIidServer()\fR;
Description:
	Returns \s-1ID\s0 server client
.PP
\fIget_new_id\fR
.IX Subsection "get_new_id"
.PP
Definition:
	string id = get_new_id(string prefix);
Description:
	Returns \s-1ID\s0 with given prefix
.PP
\fIconfig\fR
.IX Subsection "config"
.PP
Definition:
	ModelSEED::MS::Config = ModelSEED::utilities::config({
		filename => string
	});
Description:
	Loads and returns the current configuration
Example:
.PP
\fI\s-1ARGS\s0\fR
.IX Subsection "ARGS"
.PP
Definition:
	\s-1ARGS\-\s0>({}:arguments,[string]:mandatory arguments,{}:optional arguments);
Description:
	Processes arguments to authenticate users and perform other needed tasks
.PP
\fI\s-1USAGE\s0\fR
.IX Subsection "USAGE"
.PP
Definition:
	string = ModelSEED::utilities::USAGE([]:madatory arguments,{}:optional arguments);
Description:
	Prints the usage for the current function call.
.PP
\fI\s-1ERROR\s0\fR
.IX Subsection "ERROR"
.PP
Definition:
	void \fIModelSEED::utilities::ERROR()\fR;
Description:
.PP
\fI\s-1USEERROR\s0\fR
.IX Subsection "USEERROR"
.PP
Definition:
	void \fIModelSEED::utilities::USEERROR()\fR;
Description:
.PP
\fI\s-1USEWARNING\s0\fR
.IX Subsection "USEWARNING"
.PP
Definition:
	void \fIModelSEED::utilities::USEWARNING()\fR;
Description:
.PP
\fI\s-1PRINTFILE\s0 Definition: void \fIModelSEED::utilities::PRINTFILE()\fI; Description:\fR
.IX Subsection "PRINTFILE Definition: void ModelSEED::utilities::PRINTFILE(); Description:"
.PP
\fI\s-1TOJSON\s0\fR
.IX Subsection "TOJSON"
.PP
Definition:
	void ModelSEED::utilities::TOJSON(\s-1REF\s0);
Description:
.PP
\fI\s-1LOADFILE\s0 Definition: void \fIModelSEED::utilities::LOADFILE()\fI; Description:\fR
.IX Subsection "LOADFILE Definition: void ModelSEED::utilities::LOADFILE(); Description:"
.PP
\fI\s-1LOADTABLE\s0 Definition: void ModelSEED::utilities::LOADTABLE(string:filename,string:delimiter); Description:\fR
.IX Subsection "LOADTABLE Definition: void ModelSEED::utilities::LOADTABLE(string:filename,string:delimiter); Description:"
.PP
\fI\s-1PRINTTABLE\s0\fR
.IX Subsection "PRINTTABLE"
.PP
Definition:
	void ModelSEED::utilities::PRINTTABLE(string:filename,{}:table);
Description:
.PP
\fI\s-1PRINTTABLESPARSE\s0\fR
.IX Subsection "PRINTTABLESPARSE"
.PP
Definition:
	void ModelSEED::utilities::PRINTTABLESPARSE(string:filename,table:table,string:delimiter,double:min,double:max);
Description:
.PP
\fI\s-1PRINTHTMLTABLE\s0\fR
.IX Subsection "PRINTHTMLTABLE"
.PP
Definition:
    string = ModelSEED::utilities::PRINTHTMLTABLE( array[string]:headers, array[array[string]]:data, string:table_class );
Description:
    Utility method to print html table
Example:
    my \f(CW$headers\fR = ['Column 1', 'Column 2', 'Column 3'];
    my \f(CW$data\fR = [['1.1', '1.2', '1.3'], ['2.1', '2.2', '2.3'], ['3.1', '3.2', '3.3']];
    my \f(CW$html\fR = ModelSEED::utilities::PRINTHTMLTABLE( \f(CW$headers\fR, \f(CW$data\fR, 'my\-class');
.PP
\fI\s-1MODELSEEDCORE\s0\fR
.IX Subsection "MODELSEEDCORE"
.PP
Definition:
	string = \fIModelSEED::utilities::MODELSEEDCORE()\fR;
Description:
	This function converts the job specifications into a ModelDriver command and runs it
Example:
.PP
\fI\s-1GLPK\s0\fR
.IX Subsection "GLPK"
.PP
Definition:
	string = \fIModelSEED::utilities::GLPK()\fR;
Description:
	Returns location of glpk executable
Example:
.PP
\fI\s-1CPLEX\s0\fR
.IX Subsection "CPLEX"
.PP
Definition:
	string = \fIModelSEED::utilities::CPLEX()\fR;
Description:
	Returns location of cplex executable
Example:
.PP
\fIparseArrayString\fR
.IX Subsection "parseArrayString"
.PP
Definition:
	string = ModelSEED::utilities::parseArrayString({
		string => string(none),
		delimiter => string(|),
		array => [](undef)	
	});
Description:
	Parses string into array
Example:
.PP
\fItranslateArrayOptions\fR
.IX Subsection "translateArrayOptions"
.PP
Definition:
	string = ModelSEED::utilities::translateArrayOptions({
		option => string|[],
		delimiter => string:|
	});
Description:
	Parses argument options into array
Example:
