.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ModelSEED::MS::Model 3pm"
.TH ModelSEED::MS::Model 3pm "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
\fIfindCreateEquivalentCompartment\fR
.IX Subsection "findCreateEquivalentCompartment"
.PP
Definition:
	void ModelSEED::MS::Model\->findCreateEquivalentCompartment({
		modelcompartment => ModelSEED::MS::ModelCompartment(\s-1REQ\s0),
		create => 0/1(1)
	});
Description:
	Search for an equivalent comparment for the input model compartment
.PP
\fIfindCreateEquivalentCompound\fR
.IX Subsection "findCreateEquivalentCompound"
.PP
Definition:
	void ModelSEED::MS::Model\->findCreateEquivalentCompound({
		modelcompound => ModelSEED::MS::ModelCompound(\s-1REQ\s0),
		modelcompartment => ModelSEED::MS::ModelCompartment(\s-1REQ\s0),
		create => 0/1(1)
	});
Description:
	Search for an equivalent compound for the input model compound
.PP
\fIfindCreateEquivalentReaction\fR
.IX Subsection "findCreateEquivalentReaction"
.PP
Definition:
	void ModelSEED::MS::Model\->findCreateEquivalentReaction({
		modelreaction => ModelSEED::MS::ModelReaction(\s-1REQ\s0),
		create => 0/1(1)
	});
Description:
	Search for an equivalent reaction for the input model reaction
.PP
\fIfindCreateEquivalentBiomass\fR
.IX Subsection "findCreateEquivalentBiomass"
.PP
Definition:
	void ModelSEED::MS::Model\->findCreateEquivalentBiomass({
		biomass => ModelSEED::MS::Biomass(\s-1REQ\s0),
		create => 0/1(1)
	});
Description:
	Search for an equivalent biomass for the input model biomass
.PP
\fIfindTransporterReactions\fR
.IX Subsection "findTransporterReactions"
.PP
Definition:
    ModelSEED:MS::Model\->\fIgetTransporterReactions()\fR
.PP
Description:
    Search the model for reactions that are transporters.  Returns an array of reactions.
.PP
\fIaddTransportersFromMedia\fR
.IX Subsection "addTransportersFromMedia"
.PP
Definition:
    ModelSEED::MS::Model\->addTransportersFromMedia({
           media => ModelSEED::MS::Media(\s-1REQ\s0)
           model_transporters => ModelSEED::MS::Reaction array
           bio_transporters => ModelSEED::MS::Reaction array
           ex_uuid => extracellular compartment \s-1UUID
    \s0})
.PP
Description:
    Search the model for reactions that contain \s-1EXTRACELLULAR\s0 versions of each compound in media \*(L"media\*(R".
    If none is present, it searches the biochemistry and adds the first one that it finds (note \- we might
    later want to define some kind of priority system for them)
.PP
\fImergeModel\fR
.IX Subsection "mergeModel"
.PP
Definition:
	void ModelSEED::MS::Model\->mergeModel({
		model => ModelSEED::MS::Model(\s-1REQ\s0)
	});
Description:
	Merges in the input model with the current model, combining namespace and eliminating redundant compounds and reactions
.PP
\fIbuildModelFromAnnotation Definition: ModelSEED::MS::ModelReaction = ModelSEED::MS::Model\->buildModelFromAnnotation({ annotation => \f(CI$self\fI\->\fIannotation()\fI, mapping => \f(CI$self\fI\->\fImapping()\fI, }); Description: Clears existing compounds, reactions, compartments, and biomass and rebuilds model from annotation\fR
.IX Subsection "buildModelFromAnnotation Definition: ModelSEED::MS::ModelReaction = ModelSEED::MS::Model->buildModelFromAnnotation({ annotation => $self->annotation(), mapping => $self->mapping(), }); Description: Clears existing compounds, reactions, compartments, and biomass and rebuilds model from annotation"
.PP
\fIbuildModelByLayers\fR
.IX Subsection "buildModelByLayers"
.PP
Definition:
	void ModelSEED::MS::Model\->buildModelByLayers({
.PP
.Vb 2
\&        });
\&Description:
.Ve
.PP
\fIcreateStandardFBABiomass Definition: ModelSEED::MS::Biomass = ModelSEED::MS::Annotation\->createStandardFBABiomass({ mapping => \f(CI$self\fI\->\fImapping()\fI }); Description: Creates a new biomass based on the annotation\fR
.IX Subsection "createStandardFBABiomass Definition: ModelSEED::MS::Biomass = ModelSEED::MS::Annotation->createStandardFBABiomass({ mapping => $self->mapping() }); Description: Creates a new biomass based on the annotation"
.PP
\fItestBiomassCondition\fR
.IX Subsection "testBiomassCondition"
.PP
Definition:
	ModelSEED::MS::Model = ModelSEED::MS::Model\->testBiomassCondition({
		condition => \s-1REQUIRED,
	\s0	annotation => \f(CW$self\fR\->\fIannotation()\fR
	});
Description:
	Tests if the organism satisfies the conditions for inclusion of the compound in the model biomass reaction
.PP
\fIaddReactionToModel\fR
.IX Subsection "addReactionToModel"
.PP
Definition:
	ModelSEED::MS::ModelReaction = ModelSEED::MS::Model\->addReactionToModel({
		reaction => \s-1REQUIRED,
	\s0	direction => undef (default value will be pulled from reaction instance),
		protons => undef (default value will be pulled from reaction instance),
		gpr => \*(L"\s-1UNKNOWN\*(R"
	\s0});
Description:
	Converts the input reaction instance into a model reaction and adds the reaction and associated compounds to the model.
.PP
\fIaddCompartmentToModel\fR
.IX Subsection "addCompartmentToModel"
.PP
Definition:
	ModelSEED::MS::Model = ModelSEED::MS::Model\->addCompartmentToModel({
		Compartment => \s-1REQUIRED,
	\s0	pH => 7,
		potential => 0,
		compartmentIndex => 0
	});
Description:
	Adds a compartment to the model after checking that the compartment isn't already there
.PP
\fIaddCompoundToModel\fR
.IX Subsection "addCompoundToModel"
.PP
Definition:
	ModelSEED::MS::ModelCompound = ModelSEED::MS::Model\->addCompoundToModel({
		compound => \s-1REQUIRED,
	\s0	modelCompartment => \s-1REQUIRED,
	\s0	charge => undef (default values will be pulled from input compound),
		formula => undef (default values will be pulled from input compound)
	});
Description:
	Adds a compound to the model after checking that the compound isn't already there
.PP
\fIadjustBiomassReaction\fR
.IX Subsection "adjustBiomassReaction"
.PP
Definition:
	ModelSEED::MS::Model\->adjustBiomassReaction({
		biomass => string
		compound => string,
		compartment => string,
		compartmentIndex => integer,
		coefficient => float
	});
Description:
	Modifies the biomass reaction to adjust a compound, add a compound, or remove a compound
.PP
\fImanualReactionAdjustment\fR
.IX Subsection "manualReactionAdjustment"
.PP
Definition:
	ModelSEED::MS::Model\->manualReactionAdjustment({
		reaction => string,
    	direction => string,
    	compartment => string,
    	compartmentIndex => integer,
    	gpr => [[[]]],
    	removeReaction => 0/1(0),
    	addReaction => 0/1(0)
	});
Description:
.PP
\fIlabelBiomassCompounds\fR
.IX Subsection "labelBiomassCompounds"
.PP
Definition:
	void ModelSEED::MS::Model\->\fIlabelBiomassCompounds()\fR;
Description:
	Labels all model compounds indicating whether or not they are biomass components
.PP
\fIprintSBML\fR
.IX Subsection "printSBML"
.PP
Definition:
	void ModelSEED::MS::Model\->\fIprintSBML()\fR;
Description:
	Prints the model in \s-1SBML\s0 format
.PP
\fIprintExchange\fR
.IX Subsection "printExchange"
.PP
Definition:
	string:Exchange format = ModelSEED::MS::Model\->\fIprintExchange()\fR;
Description:
	Returns a string with the model in Exchange format
.PP
\fIprintModelSEED\fR
.IX Subsection "printModelSEED"
.PP
Definition:
	string:Exchange format = ModelSEED::MS::Model\->\fIprintModelSEED()\fR;
Description:
	Returns a string with the model in ModelSEED format
.PP
\fIexport\fR
.IX Subsection "export"
.PP
Definition:
	string = ModelSEED::MS::Model\->\fIexport()\fR;
Description:
	Exports model data to the specified format.
.PP
\fIprintExcel\fR
.IX Subsection "printExcel"
.PP
Definition:
	string \fIprintExcel()\fR;
Description:
	Prints model data in excel
.PP
\fIprintCytoSEED\fR
.IX Subsection "printCytoSEED"
.PP
Definition:
	void ModelSEED::MS::Model\->\fIprintCytoSEED()\fR;
Description:
	Prints the model in CytoSEED format
.PP
\fIgapfillModel\fR
.IX Subsection "gapfillModel"
.PP
Definition:
	ModelSEED::MS::GapfillingSolution ModelSEED::MS::Model\->gapfillModel({
		gapfillingFormulation => ModelSEED::MS::GapfillingFormulation,
		fbaFormulation => ModelSEED::MS::FBAFormulation
	});
Description:
	Runs gapfilling on the model and integrates the output gapfilling solution
.PP
\fIintegrateGapfillSolution\fR
.IX Subsection "integrateGapfillSolution"
.PP
Definition:
	void ModelSEED::MS::Model\->integrateGapfillSolution({
		solution => ModelSEED::MS::GapfillingFormulation*
	});
Description:
	Integrates a gapfilling solution into the model
.PP
\fIgapgenModel\fR
.IX Subsection "gapgenModel"
.PP
Definition:
	ModelSEED::MS::GapgenSolution = ModelSEED::MS::Model\->gapgenModel({
		gapgenFormulation => ModelSEED::MS::GapgenFormulation,
		fbaFormulation => ModelSEED::MS::FBAFormulation
	});
Description:
	Runs gapgeneration on the model and integrates the output gapgeneration solution
.PP
\fIintegrateGapgenSolution\fR
.IX Subsection "integrateGapgenSolution"
.PP
Definition:
	void ModelSEED::MS::Model\->integrateGapgenSolution({
		solution => ModelSEED::MS::GapgenFormulation*
	});
Description:
	Integrates a gapgen solution into the model
.PP
\fIbuildGraph\fR
.IX Subsection "buildGraph"
.PP
Definition:
	Graph = ModelSEED::MS::Model\->\fIbuildGraph()\fR;
Description:
	This command builds a graph object from the model
.PP
\fIcomputeNetworkDistances\fR
.IX Subsection "computeNetworkDistances"
.PP
Definition:
	Table = ModelSEED::MS::Model\->\fIcomputeNetworkDistances()\fR;
Description:
	This command computes distances between all metabolites, reactions, and functional roles
.PP
\fIsearchForCompound\fR
.IX Subsection "searchForCompound"
.PP
Definition:
	ModelSEED::MS::ModelCompound ModelSEED::MS::Model\->searchForCompound(string:id);
Description:
	Search for compound in model
.PP
\fIsearchForBiomass\fR
.IX Subsection "searchForBiomass"
.PP
Definition:
	ModelSEED::MS::Biomass ModelSEED::MS::Model\->searchForBiomass(string:id);
Description:
	Search for biomass in model
.PP
\fIsearchForReaction\fR
.IX Subsection "searchForReaction"
.PP
Definition:
	ModelSEED::MS::Biomass ModelSEED::MS::Model\->searchForReaction(string:id);
Description:
	Search for reaction in model
