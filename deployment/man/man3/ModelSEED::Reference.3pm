.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ModelSEED::Reference 3pm"
.TH ModelSEED::Reference 3pm "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "ModelSEED::Reference"
.IX Header "ModelSEED::Reference"
Parse and construct ModelSEED data references.
.SS "\s-1SYNOPSIS \s0"
.IX Subsection "SYNOPSIS "
.Vb 9
\&    my $ref = ModelSEED::Reference\->new( ref => "biochemistry/chenry/main" );
\&    print $ref\->type;                     # \*(Aqobject\*(Aq
\&    print $ref\->id;                       # \*(Aqchenry/main\*(Aq
\&    print $ref\->id_type;                  # \*(Aqalias\*(Aq
\&    print $ref\->alias_string;             # \*(Aqmain\*(Aq
\&    print $ref\->alias_username;           # \*(Aqchenry\*(Aq
\&    print $ref\->alias_type;               # \*(Aqbiochemistry\*(Aq;
\&    print $ref\->base;                     # \*(Aqbiochemistry/\*(Aq
\&    print $ref\->class;                    # \*(AqModelSEED::MS::Biochemistry\*(Aq
\&
\&    my $ref = ModelSEED::Reference\->new(
\&        ref => "http://model\-api.theseed.org/biochemistry/chenry/main/reactions"
\&    );
\&    print $ref\->type;                      # \*(Aqcollection\*(Aq
\&    print $ref\->authority if $ref\->is_url; # \*(Aqmodel\-api.theseed.org\*(Aq
\&    print $ref\->scheme if $ref\->is_url;    # \*(Aqhttp\*(Aq
\&    
\&    # Construct ref from type, alias
\&    my $ref = ModelSEED::Reference\->new(\*(Aqalias\*(Aq => \*(Aqchenry/main\*(Aq, type => \*(Aqbiochemsitry\*(Aq);
\&    print $ref\->ref; # \*(Aq/biochemistry/chenry/main\*(Aq
\&
\&    # Construct ref from type, uuid, with base type and id
\&    my $ref = ModelSEED::Reference\->new(
\&        base_types => [ \*(Aqbiochemistry\*(Aq ], base_ids => [ \*(Aqchenry/main\*(Aq ],
\&        uuid => "550e8400\-e29b\-41d4\-a716\-446655440000",
\&        type => \*(Aqcompound\*(Aq
\&    );
\&    print $ref\->ref; # \*(Aq/biochemistry/chenry/main/compound/550e8400\-e29b\-41d4\-a716\-446655440000\*(Aq
.Ve
.SS "Construction"
.IX Subsection "Construction"
The \f(CW\*(C`new\*(C'\fR function accepts different parameters for constructing
a reference. These are divided into sets where each set contains the
complete parameters needed to create a reference:
.IP "Basic string" 4
.IX Item "Basic string"
Pass in a string to the attribute 'ref'.
.Sp
.Vb 1
\&    my $ref = ModelSEED::Reference\->new(ref => "biochemistry/chenry/main");
.Ve
.IP "\s-1UUID\s0 and type" 4
.IX Item "UUID and type"
Pass in the attributes 'uuid' and 'type' for a top level object.
Pass in 'uuid', 'type', 'base_ids', and 'base_types' for deep references:
.Sp
.Vb 4
\&    my $ref = ModelSEED::Reference\->new(uuid => :uuid, type => \*(Aqbiochemistry\*(Aq);
\&    my $ref = ModelSEED::Reference\->new(uuid => :uuid, type => \*(Aqcompound\*(Aq,
\&        base_types => [ \*(Aqbiochemistry\*(Aq ], base_ids => [ \*(Aqchenry/main\*(Aq ]
\&    );
.Ve
.IP "Alias and type" 4
.IX Item "Alias and type"
Pass in the attributes 'alias' and 'type' for a top level object.
Include the 'base_ids' and 'base_types' for deep refernces.
.PP
Errors
.IX Subsection "Errors"
.PP
If the data provided during reference construction results in an
invalid reference object, an error \f(CW\*(C`Invalid Reference\*(C'\fR will be
thrown.
.PP
\fIInstance Attributes\fR
.IX Subsection "Instance Attributes"
.PP
A reference instance has many attributes that can be used to
act on that reference. These should all be treated as read-only
accessors:
.PP
Basic Attributes
.IX Subsection "Basic Attributes"
.IP "ref" 4
.IX Item "ref"
The complete reference as a string. Can be passed into a new
constructor.
.IP "type" 4
.IX Item "type"
A string that is either \f(CW\*(C`collection\*(C'\fR or \f(CW\*(C`object\*(C'\fR. This indicates
whether the reference points to a single object, e.g. a reaction,
or a collection of objects, e.g. all of the reactions in a biochemistry
object.
.IP "base" 4
.IX Item "base"
If the \f(CW\*(C`type\*(C'\fR is an object, this would return the non-id portion
of the ref string.  If the \f(CW\*(C`type\*(C'\fR is a collection, this would
correspond to the whole \f(CW\*(C`ref\*(C'\fR string.
.IP "id" 4
.IX Item "id"
This is defined if the \f(CW\*(C`type\*(C'\fR is an object. It is a string contianing
the id portion of the reference.
.PP
\s-1ID\s0 Attributes
.IX Subsection "ID Attributes"
.IP "id_type" 4
.IX Item "id_type"
A string that is either \f(CW\*(C`uuid\*(C'\fR or \f(CW\*(C`alias\*(C'\fR indicating whether
the id portion should be treated as a \s-1UUID\s0 or as an alias string.
.IP "alias_username" 4
.IX Item "alias_username"
If \f(CW\*(C`id_type\*(C'\fR is \*(L"alias\*(R", this returns the username portion of the alias.
.IP "alias_string" 4
.IX Item "alias_string"
If \f(CW\*(C`id_type\*(C'\fR is \*(L"alias\*(R", this returns the unrestricted portion of the
alias string.
.IP "alias_type" 4
.IX Item "alias_type"
If \f(CW\*(C`id_type\*(C'\fR is \*(L"alias\*(R", this returns the type associated with the alias.
.PP
\s-1URL\s0 Attributes
.IX Subsection "URL Attributes"
.PP
A reference can be passed in as a \s-1URL\s0 string, e.g.
.PP
.Vb 1
\&    http://model\-api.theseed.org/biochemistry/alice/main
.Ve
.PP
If this is the case, \f(CW\*(C`is_url\*(C'\fR will be true and the following attributes will be defined:
.IP "scheme" 4
.IX Item "scheme"
The \s-1URL\s0 schema, usually \*(L"http\*(R".
.IP "authority" 4
.IX Item "authority"
The \*(L"domain\*(R" portion of the url, e.g. \*(L"model\-api.theseed.org\*(R"
