.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "myRAST::ClientThing 3pm"
.TH myRAST::ClientThing 3pm "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Base Class for Server Helper Objects"
.IX Header "Base Class for Server Helper Objects"
.SS "Description"
.IX Subsection "Description"
This object is used as the base class for the various server objects. It provides
the functions needed to invoke one of the servers.
.PP
This package deliberately uses no internal \s-1SEED\s0 packages or scripts, only common
\&\s-1PERL\s0 modules.
.PP
The fields in this object are as follows.
.IP "server_url" 4
.IX Item "server_url"
The \s-1URL\s0 used to request data from the sapling server. If \f(CW\*(C`localhost\*(C'\fR is
specified, then the \s-1SAP\s0 module will be called directly.
.IP "ua" 4
.IX Item "ua"
The user agent for communication with the server.
.IP "singleton" 4
.IX Item "singleton"
Indicates whether or not results are to be returned in singleton mode. In
singleton mode, if the return document is a hash reference with only one
entry, the entry value is returned rather than the hash.
.IP "methodHash" 4
.IX Item "methodHash"
Reference to a hash keyed by the names of the server's permissible methods.
.SS "Creating a Server Client Package"
.IX Subsection "Creating a Server Client Package"
The code to create a server client package is simple. The following program
is the entire Sapling server.
.PP
.Vb 3
\&    package SAPserver;
\&    use strict;
\&    use base qw(ClientThing);
\&    
\&    sub new {
\&        my ($class, %options) = @_;
\&        $options{url} = \*(Aqhttp://servers.nmpdr.org/sapling/server.cgi\*(Aq if ! defined $options{url};
\&        return $class\->SUPER::new(\*(AqSAP\*(Aq, %options);
\&    }
\&    
\&    1;
.Ve
.PP
Most methods that the server will support are then handled automatically by the
this class's \s-1AUTOLOAD.\s0
.PP
\fIFile-Based Data Transfer\fR
.IX Subsection "File-Based Data Transfer"
.PP
Most server methods take \s-1YAML\s0 input and produce \s-1YAML\s0 output. In some cases,
however, the size of the input or output precludes packaging everything into
strings for passage directly across the network. For this reason, the utility
methods _send_file and _receive_file have been provided. These allow
entire files of data to be sent and received piecemeal. Methods that require
this capability will need to be specified explicitly in the subclass rather than
relying on the \s-1AUTOLOAD.\s0
.PP
\&\s-1NOTE:\s0 This facility was intended to provide flow control for calls to the
\&\fBquery\fR method in the Sapling Server, but it has never actually been
implemented.
.SS "Main Object Methods"
.IX Subsection "Main Object Methods"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 1
\&    my $ss = ClientThing\->new($type, %options);
.Ve
.PP
Construct a new server object. The \fI\f(CI$type\fI\fR parameter should be the server type
(e.g. \f(CW\*(C`SAP\*(C'\fR for the Sapling server, \f(CW\*(C`FFfunctions\*(C'\fR for the FIGfams server). The
following options are supported.
.IP "url" 4
.IX Item "url"
\&\s-1URL\s0 for the server. This option is required.
.IP "singleton (optional)" 4
.IX Item "singleton (optional)"
If \s-1TRUE,\s0 results from methods will be returned in singleton mode. In singleton
mode, if a single result comes back, it will come back as a scalar rather than
as a hash value accessible via an incoming \s-1ID.\s0
.PP
\fI\s-1AUTOLOAD\s0\fR
.IX Subsection "AUTOLOAD"
.PP
.Vb 1
\&    my $result = $server\->method(%args);
.Ve
.PP
Call a function on the server. Any method call on this object (other than
the constructor) is translated into a request against the server. This
enables us to add new server functions without requiring an update to this
object or its parent. The parameters are usually specified as a hash, and the
result is a scalar or object reference. In some cases the parameters are a list.
To deistinguish between the two cases, all hash keys must begin with hyphens.
.PP
If an error occurs, we will throw an exception.
.PP
\fI\s-1DESTROY\s0\fR
.IX Subsection "DESTROY"
.PP
.Vb 1
\&    $ss\->DESTROY();
.Ve
.PP
This method has no function. It's purpose is to keep the destructor from
being caught by the autoload processing.
.PP
\fIChangeDB\fR
.IX Subsection "ChangeDB"
.PP
.Vb 1
\&    $server\->ChangeDB($newDbName);
.Ve
.PP
Specify the new database for future requests against this object.
.IP "newDbName" 4
.IX Item "newDbName"
The name of the new database.
.SS "Utility Methods"
.IX Subsection "Utility Methods"
\fIComputeURL\fR
.IX Subsection "ComputeURL"
.PP
.Vb 1
\&    my $url = ClientThing::ComputeURL($url, $cgi, $name);
.Ve
.PP
Compute the \s-1URL\s0 to use for connecting to this client's server. The default is to
connect to the annotator \s-1SEED\s0 script, but the client can request direct calls
(localhost), a specific \s-1URL,\s0 the P\-SEED, or a specific \s-1SEED\s0 sandbox.
.PP
If a \s-1URL\s0 is specified, it is returned without preamble.
.PP
If no \s-1URL\s0 is specified, then the \f(CW\*(C`SAS_SERVER\*(C'\fR environment variable is examined for
the following values.
.IP "localhost" 4
.IX Item "localhost"
Use direct calls to the server without going through \s-1HTTP \s0(only works for the
Sapling and \s-1FBAMODEL\s0 servers).
.IP "\s-1SEED \s0(default)" 4
.IX Item "SEED (default)"
Use the main servers for the Annotator \s-1SEED\s0 data.
.IP "\s-1PSEED\s0" 4
.IX Item "PSEED"
Use the alternate servers for the \s-1PSEED\s0 data.
.IP "(other)" 4
.IX Item "(other)"
In this case, the value will be assumed to be the \s-1URL\s0 of a \s-1SEED\s0 sandbox, and the
appropriate script in that sandbox will be used.
.PP
The parameters are as follows:
.IP "url (optional)" 4
.IX Item "url (optional)"
\&\s-1URL\s0 to use, if specified.
.IP "cgi" 4
.IX Item "cgi"
Name of the \s-1CGI\s0 script to use if a \s-1SEED\s0 sandbox is requested (e.g. \f(CW\*(C`sap_server.cgi\*(C'\fR,
\&\f(CW\*(C`anno_server.cgi\*(C'\fR).
.IP "name" 4
.IX Item "name"
Name of the pseudo-directory to use if a server is requested (e.g. \f(CW\*(C`sapling\*(C'\fR, \f(CW\*(C`anno\*(C'\fR).
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
Returns the \s-1URL\s0 to pass to the server interface object constructor.
.PP
\fIFixOptions\fR
.IX Subsection "FixOptions"
.PP
.Vb 1
\&    my %options = ClientThing::FixOptions(@options);
.Ve
.PP
This method allows more options for the specification of parameters to a server's
client module. First, the input can be specified as a hash or a hash reference,
and the keys can optionally have hyphens prefixed. (So, for example, the key
\&\f(CW\*(C`\-url\*(C'\fR would be converted to \f(CW\*(C`url\*(C'\fR.)
.PP
\fI_call_method\fR
.IX Subsection "_call_method"
.PP
.Vb 1
\&    my $result = $server\->_call_method($method, $args);
.Ve
.PP
Call the specified method on the server with the specified arguments and
return the result. The arguments must already be packaged as a hash or
list reference. This method is the heart of the \s-1AUTOLOAD\s0 method, and is
provided as a utility for specialized methods that can't use the \s-1AUTOLOAD\s0
facility.
.IP "method" 4
.IX Item "method"
Name of the server function being invoked.
.IP "args" 4
.IX Item "args"
Argument object to pass to the function.
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
Returns a hash or list reference with the function results.
.PP
\fI_send_file\fR
.IX Subsection "_send_file"
.PP
.Vb 1
\&    my $name = $server\->_send_file($ih);
.Ve
.PP
Send a file of data to the server and return its name.
.IP "ih" 4
.IX Item "ih"
Open input file handle or the name of the input file.
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
Returns the name of the file created on the server. This is not the full name
of the file; rather, it is enough information for the server to find the file
again when it needs it.
.PP
\fI_receive_file\fR
.IX Subsection "_receive_file"
.PP
.Vb 1
\&    $server\->_receive_file($oh, $name);
.Ve
.PP
Retrieve the named file of data from the server.
.IP "oh" 4
.IX Item "oh"
Open file handle to which the data is to be written, or the name of the file to
contain the data.
.IP "name" 4
.IX Item "name"
Name of the data file in the \s-1FIG\s0 temporary directory on the server.
.PP
\fI_send_request\fR
.IX Subsection "_send_request"
.PP
.Vb 1
\&    my $result = $server\->_send_request(%parms);
.Ve
.PP
Send a request to the server. This method must not be called in localhost
mode. If an error occurs, this method will die; otherwise, the content of
the response will be passed back as the result.
.IP "parms" 4
.IX Item "parms"
Hash of \s-1CGI\s0 parameters to send to the server.
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
Returns the string returned by the server in response to the request.
