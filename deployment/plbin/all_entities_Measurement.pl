use strict;
use Data::Dumper;
use Carp;

#
# This is a SAS Component
#


=head1 NAME

all_entities_Measurement

=head1 SYNOPSIS

all_entities_Measurement [-a] [--fields fieldlist] > entity-data

=head1 DESCRIPTION

Return all instances of the Measurement entity.

A Measurement is a value generated by performing a protocol to
evaluate a value on an ExperimentalUnit - e.g. a strain in an
environment.

Example:

    all_entities_Measurement -a 

would retrieve all entities of type Measurement and include all fields
in the entities in the output.

=head2 Related entities

The Measurement entity has the following relationship links:

=over 4
    
=item IsDefinedBy MeasurementDescription

=item IsMeasureOf ExperimentalUnit

=item MeasurementInSample Sample

=item MeasuresCompound Compound

=item MeasuresFeature Feature

=item WasMeasuredBy Protocol


=back

=head1 COMMAND-LINE OPTIONS

Usage: all_entities_Measurement [arguments] > entity.data

    --fields list   Choose a set of fields to return. List is a comma-separated list of strings.
    -a		    Return all available fields.
    --show-fields   List the available fields.

The following fields are available:

=over 4    

=item source_id

The ID of the measurement used by the data source.

=item value

The value of the measurement.

=item mean

The mean of multiple replicates if they are included in the measurement.

=item median

The median of multiple replicates if they are included in the measurement.

=item stddev

The standard deviation of multiple replicates if they are included in the measurement.

=item N

The number of replicates if they are included in the measurement.

=item p_value

The p-value of multiple replicates if they are included in the measurement. The exact meaning of the p-value is specified in the MeasurementDescription object for this measurement.

=item Z_score

The Z-score of multiple replicates if they are included in the measurement. The exact meaning of the Z-score is specified in the MeasurementDescription object for this measurement.


=back

=head1 AUTHORS

L<The SEED Project|http://www.theseed.org>

=cut

use Bio::KBase::CDMI::CDMIClient;
use Getopt::Long;

#Default fields

my @all_fields = ( 'source_id', 'value', 'mean', 'median', 'stddev', 'N', 'p_value', 'Z_score' );
my %all_fields = map { $_ => 1 } @all_fields;

our $usage = <<'END';
Usage: all_entities_Measurement [arguments] > entity.data

    --fields list   Choose a set of fields to return. List is a comma-separated list of strings.
    -a		    Return all available fields.
    --show-fields   List the available fields.

The following fields are available:

    source_id
        The ID of the measurement used by the data source.
    value
        The value of the measurement.
    mean
        The mean of multiple replicates if they are included in the measurement.
    median
        The median of multiple replicates if they are included in the measurement.
    stddev
        The standard deviation of multiple replicates if they are included in the measurement.
    N
        The number of replicates if they are included in the measurement.
    p_value
        The p-value of multiple replicates if they are included in the measurement. The exact meaning of the p-value is specified in the MeasurementDescription object for this measurement.
    Z_score
        The Z-score of multiple replicates if they are included in the measurement. The exact meaning of the Z-score is specified in the MeasurementDescription object for this measurement.
END


my $a;
my $f;
my @fields;
my $show_fields;
my $help;
my $geO = Bio::KBase::CDMI::CDMIClient->new_get_entity_for_script("a" 		=> \$a,
								  "show-fields" => \$show_fields,
								  "h" 		=> \$help,
								  "fields=s"    => \$f);

if ($help)
{
    print $usage;
    exit 0;
}

if ($show_fields)
{
    print "Available fields:\n";
    print "\t$_\n" foreach @all_fields;
    exit 0;
}

if (@ARGV != 0 || ($a && $f))
{
    print STDERR $usage, "\n";
    exit 1;
}

if ($a)
{
    @fields = @all_fields;
}
elsif ($f) {
    my @err;
    for my $field (split(",", $f))
    {
	if (!$all_fields{$field})
	{
	    push(@err, $field);
	}
	else
	{
	    push(@fields, $field);
	}
    }
    if (@err)
    {
	print STDERR "all_entities_Measurement: unknown fields @err. Valid fields are: @all_fields\n";
	exit 1;
    }
}

my $start = 0;
my $count = 1_000_000;

my $h = $geO->all_entities_Measurement($start, $count, \@fields );

while (%$h)
{
    while (my($k, $v) = each %$h)
    {
	print join("\t", $k, map { ref($_) eq 'ARRAY' ? join(",", @$_) : $_ } @$v{@fields}), "\n";
    }
    $start += $count;
    $h = $geO->all_entities_Measurement($start, $count, \@fields);
}
