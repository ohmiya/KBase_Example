#!/usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use Getopt::Long;
use BerkeleyDB;
use JSON;

my $verbose  = 0;
my $in_file  = '';
my $out_file = '';
my $ann_file = '';
my $md5_num  = 5000;
my $usage    = qq($0
Script to index m8 format blast file by 2nd column,
assumning md5sum as entry and sorted by md5sum.
Index will include id, seek, length for every chunck.
'id' is the integer index for the md5sum in the input file, lookup done through mongodb.
Each chunk will contain the same md5sum in 2nd column.

  --in_file      file name           Required. Name of input sim file
  --out_file     file name           Required. Name of output index file
  --md5_num      int                 Optional. Number of md5 chunks to load in memory at once before processing. Default is '$md5_num'
  --verbose                          Optional. Verbose output.
  
);
if ( (@ARGV > 0) && ($ARGV[0] =~ /-h/) ) { print STDERR $usage; exit 1; }
if ( ! GetOptions( "verbose!"   => \$verbose,
		           "in_file=s"  => \$in_file,
		           "out_file=s" => \$out_file,
		           "ann_file=s" => \$ann_file,
		           "md5_num:i"  => \$md5_num
                 ) )
  { print STDERR $usage; exit 1; }
  
unless ($in_file && (-s $in_file) && $out_file) {
    print STDERR $usage . "Missing input and/or output files.\n"; exit 1;
}

# get m5nr BerkelyDB handle
my $json = JSON->new->allow_nonref;
my %m5nr;
tie %m5nr, "BerkeleyDB::Hash",
        -Filename => $ann_file,
        -Flags    => DB_RDONLY
or die "Cannot open file $ann_file: $! $BerkeleyDB::Error\n";

print "Parsing file $in_file in $md5_num md5 size chunks ... " if ($verbose);
open(INFILE, "<$in_file") or die "Can't open file $in_file!\n";
open(OUTFILE, ">$out_file") or die "Can't open file $out_file!\n";

my $seeks = [];
my $start = 0;
my $byte  = 0;
my $size  = 0;
my $curr  = '';
my $md5s  = 0;
my $count = 0;

while (my $line = <INFILE>) {
    my @parts = split(/\t/, $line);
    my $md5 = $parts[1];
    if ($curr ne $md5) {
        if ($size > 0) {
            push @$seeks, [ $curr, $start, $size ];
            if ($md5s >= $md5_num) {
                print OUTFILE &process_seeks($seeks);
                $seeks = [];
                $md5s  = 0;
            }
        }
        $count += 1;
        $md5s  += 1;
        $curr  = $md5;
        $start = $byte;
        $size  = 0;
    }
    $byte += length $line;
    $size += length $line;
}
close INFILE;

if (scalar(@$seeks) > 0) {
    if ($size > 0) {
        push @$seeks, [ $curr, $start, $size ];
    }
    print OUTFILE &process_seeks($seeks);
}

print "Done - $count md5s indexed\n" if ($verbose);
exit 0;

sub process_seeks {
    my ($seeks) = @_;    
    my $out = '';
    foreach my $set (@$seeks) {
        my ($md5, $start, $size) = @$set;
        if (exists $m5nr{$md5}) {
           my $data = $json->decode($m5nr{$md5});
           if (exists $data->{id}) {
               $out .= join("\t", ($data->{id}, $start, $size))."\n";
           }
        }
    }
    return $out;
}


