use strict;
use Data::Dumper;
use Carp;

#
# This is a SAS Component
#


=head1 NAME

all_entities_Sample

=head1 SYNOPSIS

all_entities_Sample [-a] [--fields fieldlist] > entity-data

=head1 DESCRIPTION

Return all instances of the Sample entity.

A sample is an experiment.  
In intensity experiment situations the sample will map 1 to 1 to the GSM.  
In this case there will be corresponding log2level data stored in the Measurement table.


Example:

    all_entities_Sample -a 

would retrieve all entities of type Sample and include all fields
in the entities in the output.

=head2 Related entities

The Sample entity has the following relationship links:

=over 4
    
=item DefaultControlSample Sample

=item SampleAveragedFrom Sample

=item SampleBelongsToExperimentalUnit ExperimentalUnit

=item SampleComponentOf Sample

=item SampleContactPerson Person

=item SampleForStrain Strain

=item SampleHasAnnotations SampleAnnotation

=item SampleInSeries Series

=item SampleMeasurements Measurement

=item SampleRunOnPlatform Platform

=item SampleUsesProtocol Protocol

=item SamplesDefaultControl Sample

=item SamplesInReplicateGroup ReplicateGroup


=back

=head1 COMMAND-LINE OPTIONS

Usage: all_entities_Sample [arguments] > entity.data

    --fields list   Choose a set of fields to return. List is a comma-separated list of strings.
    -a		    Return all available fields.
    --show-fields   List the available fields.

The following fields are available:

=over 4    

=item title

free text title of the sample

=item dataSource

The Data Source will be a way to identify where the data came from.  Examples might be : GEO, SEED Expression Pipeline, Enigma, M3D

=item externalSourceId

The externalSourceId gives users potentially an easy way to find the data of interest (ex:GSM9514). This will keep them from having to do problematic likes on the source-id field.

=item description

Free-text descibing the experiment.

=item molecule

Enumerated field (total RNA, polyA RNA, cytoplasmic RNA, nuclear RNA, genomic DNA).

=item type

Enumerated Microarray, RNA-Seq, qPCR

=item kbaseSubmissionDate

date of submission to Kbase

=item externalSourceDate

date that may exist in the external source metadata (could be to GEO, M3D etc...)

=item custom

A flag to keep track if this series was generated by custom operations (averaging or comparison)

=item originalLog2Median

The Original Median of the sample in log2space.  If null means the original median was not able to be determined.

=item source_id

The ID of the environment used by the data source.

=item dataQualityLevel

The quality of the data.  Lower the number the better.  Details need to be worked out.


=back

=head1 AUTHORS

L<The SEED Project|http://www.theseed.org>

=cut

use Bio::KBase::CDMI::CDMIClient;
use Getopt::Long;

#Default fields

my @all_fields = ( 'title', 'dataSource', 'externalSourceId', 'description', 'molecule', 'type', 'kbaseSubmissionDate', 'externalSourceDate', 'custom', 'originalLog2Median', 'source_id', 'dataQualityLevel' );
my %all_fields = map { $_ => 1 } @all_fields;

our $usage = <<'END';
Usage: all_entities_Sample [arguments] > entity.data

    --fields list   Choose a set of fields to return. List is a comma-separated list of strings.
    -a		    Return all available fields.
    --show-fields   List the available fields.

The following fields are available:

    title
        free text title of the sample
    dataSource
        The Data Source will be a way to identify where the data came from.  Examples might be : GEO, SEED Expression Pipeline, Enigma, M3D
    externalSourceId
        The externalSourceId gives users potentially an easy way to find the data of interest (ex:GSM9514). This will keep them from having to do problematic likes on the source-id field.
    description
        Free-text descibing the experiment.
    molecule
        Enumerated field (total RNA, polyA RNA, cytoplasmic RNA, nuclear RNA, genomic DNA).
    type
        Enumerated Microarray, RNA-Seq, qPCR
    kbaseSubmissionDate
        date of submission to Kbase
    externalSourceDate
        date that may exist in the external source metadata (could be to GEO, M3D etc...)
    custom
        A flag to keep track if this series was generated by custom operations (averaging or comparison)
    originalLog2Median
        The Original Median of the sample in log2space.  If null means the original median was not able to be determined.
    source_id
        The ID of the environment used by the data source.
    dataQualityLevel
        The quality of the data.  Lower the number the better.  Details need to be worked out.
END


my $a;
my $f;
my @fields;
my $show_fields;
my $help;
my $geO = Bio::KBase::CDMI::CDMIClient->new_get_entity_for_script("a" 		=> \$a,
								  "show-fields" => \$show_fields,
								  "h" 		=> \$help,
								  "fields=s"    => \$f);

if ($help)
{
    print $usage;
    exit 0;
}

if ($show_fields)
{
    print "Available fields:\n";
    print "\t$_\n" foreach @all_fields;
    exit 0;
}

if (@ARGV != 0 || ($a && $f))
{
    print STDERR $usage, "\n";
    exit 1;
}

if ($a)
{
    @fields = @all_fields;
}
elsif ($f) {
    my @err;
    for my $field (split(",", $f))
    {
	if (!$all_fields{$field})
	{
	    push(@err, $field);
	}
	else
	{
	    push(@fields, $field);
	}
    }
    if (@err)
    {
	print STDERR "all_entities_Sample: unknown fields @err. Valid fields are: @all_fields\n";
	exit 1;
    }
}

my $start = 0;
my $count = 1_000_000;

my $h = $geO->all_entities_Sample($start, $count, \@fields );

while (%$h)
{
    while (my($k, $v) = each %$h)
    {
	print join("\t", $k, map { ref($_) eq 'ARRAY' ? join(",", @$_) : $_ } @$v{@fields}), "\n";
    }
    $start += $count;
    $h = $geO->all_entities_Sample($start, $count, \@fields);
}
