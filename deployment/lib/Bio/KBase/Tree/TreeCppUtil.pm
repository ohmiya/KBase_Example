# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package Bio::KBase::Tree::TreeCppUtil;
use base qw(Exporter);
use base qw(DynaLoader);
package Bio::KBase::Tree::TreeCppUtilc;
bootstrap Bio::KBase::Tree::TreeCppUtil;
package Bio::KBase::Tree::TreeCppUtil;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Bio::KBase::Tree::TreeCppUtil;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Bio::KBase::Tree::TreeCppUtil;

*translateToProt = *Bio::KBase::Tree::TreeCppUtilc::translateToProt;

############# Class : Bio::KBase::Tree::TreeCppUtil::KBTree ##############

package Bio::KBase::Tree::TreeCppUtil::KBTree;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Bio::KBase::Tree::TreeCppUtil );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Bio::KBase::Tree::TreeCppUtilc::new_KBTree(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Bio::KBase::Tree::TreeCppUtilc::delete_KBTree($self);
        delete $OWNER{$self};
    }
}

*setOutputFlagLabel = *Bio::KBase::Tree::TreeCppUtilc::KBTree_setOutputFlagLabel;
*setOutputFlagDistances = *Bio::KBase::Tree::TreeCppUtilc::KBTree_setOutputFlagDistances;
*setOutputFlagComments = *Bio::KBase::Tree::TreeCppUtilc::KBTree_setOutputFlagComments;
*setOutputFlagBootstrapValuesAsLabels = *Bio::KBase::Tree::TreeCppUtilc::KBTree_setOutputFlagBootstrapValuesAsLabels;
*toNewick = *Bio::KBase::Tree::TreeCppUtilc::KBTree_toNewick;
*writeNewickToFile = *Bio::KBase::Tree::TreeCppUtilc::KBTree_writeNewickToFile;
*removeNodesByNameAndSimplify = *Bio::KBase::Tree::TreeCppUtilc::KBTree_removeNodesByNameAndSimplify;
*mergeZeroDistLeaves = *Bio::KBase::Tree::TreeCppUtilc::KBTree_mergeZeroDistLeaves;
*replaceNodeNames = *Bio::KBase::Tree::TreeCppUtilc::KBTree_replaceNodeNames;
*replaceNodeNamesOrMakeBlank = *Bio::KBase::Tree::TreeCppUtilc::KBTree_replaceNodeNamesOrMakeBlank;
*stripReservedCharsFromLabels = *Bio::KBase::Tree::TreeCppUtilc::KBTree_stripReservedCharsFromLabels;
*printTree = *Bio::KBase::Tree::TreeCppUtilc::KBTree_printTree;
*printSimpleTreeToString = *Bio::KBase::Tree::TreeCppUtilc::KBTree_printSimpleTreeToString;
*printTreeToString = *Bio::KBase::Tree::TreeCppUtilc::KBTree_printTreeToString;
*getNodeCount = *Bio::KBase::Tree::TreeCppUtilc::KBTree_getNodeCount;
*getLeafCount = *Bio::KBase::Tree::TreeCppUtilc::KBTree_getLeafCount;
*getAllLeafNames = *Bio::KBase::Tree::TreeCppUtilc::KBTree_getAllLeafNames;
*getAllNodeNames = *Bio::KBase::Tree::TreeCppUtilc::KBTree_getAllNodeNames;
*resetBreadthFirstIterToRoot = *Bio::KBase::Tree::TreeCppUtilc::KBTree_resetBreadthFirstIterToRoot;
*breadthFirstIterNext = *Bio::KBase::Tree::TreeCppUtilc::KBTree_breadthFirstIterNext;
*breadthFirstIterMarkNode = *Bio::KBase::Tree::TreeCppUtilc::KBTree_breadthFirstIterMarkNode;
*breadthFirstIterSetToNode = *Bio::KBase::Tree::TreeCppUtilc::KBTree_breadthFirstIterSetToNode;
*breadthFirstIterGetName = *Bio::KBase::Tree::TreeCppUtilc::KBTree_breadthFirstIterGetName;
*breadthFirstIterGetPathToRoot = *Bio::KBase::Tree::TreeCppUtilc::KBTree_breadthFirstIterGetPathToRoot;
*breadthFirstIterGetParentName = *Bio::KBase::Tree::TreeCppUtilc::KBTree_breadthFirstIterGetParentName;
*breadthFirstIterGetAllChildrenNames = *Bio::KBase::Tree::TreeCppUtilc::KBTree_breadthFirstIterGetAllChildrenNames;
*breadthFirstIterGetAllDescendantNames = *Bio::KBase::Tree::TreeCppUtilc::KBTree_breadthFirstIterGetAllDescendantNames;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Bio::KBase::Tree::TreeCppUtil;

1;
