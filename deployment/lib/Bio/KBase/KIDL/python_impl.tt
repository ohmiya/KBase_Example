#BEGIN_HEADER
[% module.py_module_header -%]
#END_HEADER

[% 	specToPy.list = 'list';
	specToPy.tuple = 'list';
	specToPy.struct = 'dict';
	specToPy.mapping = 'dict';
	specToPy.int = 'int';
	specToPy.float = 'float';
	specToPy.string = 'basestring'; 
-%]

class [% module.module_name %]:
    '''
    Module Name:
    [% module.module_name %]

    Module Description:
    [% module.module_doc %]
    '''

    ######## WARNING FOR GEVENT USERS #######
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    #########################################
    #BEGIN_CLASS_HEADER
[% module.py_module_class_header -%]
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
[% module.py_module_constructor -%]
        #END_CONSTRUCTOR
        pass
[% FOREACH method IN module.methods -%]

[% SET paramlist = [];
   FOREACH p IN method.params;
       paramlist.push(p.name);
   END;
   SET retlist = [];
   FOREACH var IN method.returns;
       IF var.name == 'return';
           var.name = 'returnVal';
       END;
       retlist.push(var.name);
   END -%]
[%- IF method.arg_count > 0 -%]
    def [% method.name %](self, ctx, [% paramlist.join(', ') %]):
[% ELSE -%]
    def [% method.name %](self, ctx):
[% END -%]
        # ctx is the context object
[% IF method.ret_count > 0 -%]
        # return variables are: [% retlist.join(", ") %]
[% END -%]
        #BEGIN [% method.name %]
[% method.py_user_code -%]
        #END [% method.name %]
[% IF method.ret_count > 0 -%]

        # At some point might do deeper type checking...
[% 	FOREACH ret IN method.returns -%]
[%    	spectype = ret.baretype -%]
[%    	type = specToPy.$spectype -%]
        if not isinstance([% ret.name %], [% type %]):
            raise ValueError('Method [% method.name %] return value ' +
                             '[% ret.name %] is not type [% type %] as required.')
[% END -%]
        # return the results
        return [[% retlist.join(', ') %]]
[% END -%]
[% END -%]