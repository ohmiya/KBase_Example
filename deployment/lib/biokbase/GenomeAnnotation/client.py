############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

try:
    import json as _json
except ImportError:
    import sys
    sys.path.append('simplejson-2.3.3')
    import simplejson as _json

import requests as _requests
import urlparse as _urlparse
import random as _random
import base64 as _base64
from ConfigParser import ConfigParser as _ConfigParser
import os as _os

_CT = 'content-type'
_AJ = 'application/json'
_URL_SCHEME = frozenset(['http', 'https'])


def _get_token(user_id, password,
               auth_svc='https://nexus.api.globusonline.org/goauth/token?' +
                        'grant_type=client_credentials'):
    # This is bandaid helper function until we get a full
    # KBase python auth client released
    auth = _base64.encodestring(user_id + ':' + password)
    headers = {'Authorization': 'Basic ' + auth}
    ret = _requests.get(auth_svc, headers=headers, allow_redirects=True)
    status = ret.status_code
    if status >= 200 and status <= 299:
        tok = _json.loads(ret.text)
    elif status == 403:
        raise Exception('Authentication failed: Bad user_id/password ' +
                        'combination for user %s' % (user_id))
    else:
        raise Exception(ret.text)
    return tok['access_token']


def _read_rcfile(file=_os.environ['HOME'] + '/.authrc'):  # @ReservedAssignment
    # Another bandaid to read in the ~/.authrc file if one is present
    authdata = None
    if _os.path.exists(file):
        try:
            with open(file) as authrc:
                rawdata = _json.load(authrc)
                # strip down whatever we read to only what is legit
                authdata = {x: rawdata.get(x) for x in (
                    'user_id', 'token', 'client_secret', 'keyfile',
                    'keyfile_passphrase', 'password')}
        except Exception, e:
            print "Error while reading authrc file %s: %s" % (file, e)
    return authdata


def _read_inifile(file=_os.environ.get(  # @ReservedAssignment
                  'KB_DEPLOYMENT_CONFIG', _os.environ['HOME'] +
                  '/.kbase_config')):
    # Another bandaid to read in the ~/.kbase_config file if one is present
    authdata = None
    if _os.path.exists(file):
        try:
            config = _ConfigParser()
            config.read(file)
            # strip down whatever we read to only what is legit
            authdata = {x: config.get('authentication', x)
                        if config.has_option('authentication', x)
                        else None for x in ('user_id', 'token',
                                            'client_secret', 'keyfile',
                                            'keyfile_passphrase', 'password')}
        except Exception, e:
            print "Error while reading INI file %s: %s" % (file, e)
    return authdata


class ServerError(Exception):

    def __init__(self, name, code, message, data=None, error=None):
        self.name = name
        self.code = code
        self.message = '' if message is None else message
        self.data = data or error or ''
        # data = JSON RPC 2.0, error = 1.1

    def __str__(self):
        return self.name + ': ' + str(self.code) + '. ' + self.message + \
            '\n' + self.data


class _JSONObjectEncoder(_json.JSONEncoder):

    def default(self, obj):
        if isinstance(obj, set):
            return list(obj)
        if isinstance(obj, frozenset):
            return list(obj)
        return _json.JSONEncoder.default(self, obj)


class GenomeAnnotation(object):

    def __init__(self, url=None, timeout=30 * 60, user_id=None,
                 password=None, token=None, ignore_authrc=False,
                 trust_all_ssl_certificates=False):
        if url is None:
            url = 'http://public.hostname.org:8080/services/genome_annotation/'
        scheme, _, _, _, _, _ = _urlparse.urlparse(url)
        if scheme not in _URL_SCHEME:
            raise ValueError(url + " isn't a valid http url")
        self.url = url
        self.timeout = int(timeout)
        self._headers = dict()
        self.trust_all_ssl_certificates = trust_all_ssl_certificates
        # token overrides user_id and password
        if token is not None:
            self._headers['AUTHORIZATION'] = token
        elif user_id is not None and password is not None:
            self._headers['AUTHORIZATION'] = _get_token(user_id, password)
        elif 'KB_AUTH_TOKEN' in _os.environ:
            self._headers['AUTHORIZATION'] = _os.environ.get('KB_AUTH_TOKEN')
        elif not ignore_authrc:
            authdata = _read_inifile()
            if authdata is None:
                authdata = _read_rcfile()
            if authdata is not None:
                if authdata.get('token') is not None:
                    self._headers['AUTHORIZATION'] = authdata['token']
                elif(authdata.get('user_id') is not None
                     and authdata.get('password') is not None):
                    self._headers['AUTHORIZATION'] = _get_token(
                        authdata['user_id'], authdata['password'])
        if self.timeout < 1:
            raise ValueError('Timeout value must be at least 1 second')

    def _call(self, method, params):
        arg_hash = {'method': method,
                    'params': params,
                    'version': '1.1',
                    'id': str(_random.random())[2:]
                    }

        body = _json.dumps(arg_hash, cls=_JSONObjectEncoder)
        ret = _requests.post(self.url, data=body, headers=self._headers,
                             timeout=self.timeout,
                             verify=not self.trust_all_ssl_certificates)
        if ret.status_code == _requests.codes.server_error:
            if _CT in ret.headers and ret.headers[_CT] == _AJ:
                err = _json.loads(ret.text)
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:
                    raise ServerError('Unknown', 0, ret.text)
            else:
                raise ServerError('Unknown', 0, ret.text)
        if ret.status_code != _requests.codes.OK:
            ret.raise_for_status()
        resp = _json.loads(ret.text)
        if 'result' not in resp:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')
        return resp['result']

    def genome_ids_to_genomes(self, ids):
        resp = self._call('GenomeAnnotation.genome_ids_to_genomes',
                          [ids])
        return resp[0]

    def create_genome(self, metadata):
        resp = self._call('GenomeAnnotation.create_genome',
                          [metadata])
        return resp[0]

    def create_genome_from_SEED(self, genome_id):
        resp = self._call('GenomeAnnotation.create_genome_from_SEED',
                          [genome_id])
        return resp[0]

    def create_genome_from_RAST(self, genome_or_job_id):
        resp = self._call('GenomeAnnotation.create_genome_from_RAST',
                          [genome_or_job_id])
        return resp[0]

    def set_metadata(self, genome_in, metadata):
        resp = self._call('GenomeAnnotation.set_metadata',
                          [genome_in, metadata])
        return resp[0]

    def add_contigs(self, genome_in, contigs):
        resp = self._call('GenomeAnnotation.add_contigs',
                          [genome_in, contigs])
        return resp[0]

    def add_contigs_from_handle(self, genome_in, contigs):
        resp = self._call('GenomeAnnotation.add_contigs_from_handle',
                          [genome_in, contigs])
        return resp[0]

    def add_features(self, genome_in, features):
        resp = self._call('GenomeAnnotation.add_features',
                          [genome_in, features])
        return resp[0]

    def genomeTO_to_reconstructionTO(self, genomeTO):
        resp = self._call('GenomeAnnotation.genomeTO_to_reconstructionTO',
                          [genomeTO])
        return resp[0]

    def genomeTO_to_feature_data(self, genomeTO):
        resp = self._call('GenomeAnnotation.genomeTO_to_feature_data',
                          [genomeTO])
        return resp[0]

    def reconstructionTO_to_roles(self, reconstructionTO):
        resp = self._call('GenomeAnnotation.reconstructionTO_to_roles',
                          [reconstructionTO])
        return resp[0]

    def reconstructionTO_to_subsystems(self, reconstructionTO):
        resp = self._call('GenomeAnnotation.reconstructionTO_to_subsystems',
                          [reconstructionTO])
        return resp[0]

    def assign_functions_to_CDSs(self, genomeTO):
        resp = self._call('GenomeAnnotation.assign_functions_to_CDSs',
                          [genomeTO])
        return resp[0]

    def annotate_genome(self, genomeTO):
        resp = self._call('GenomeAnnotation.annotate_genome',
                          [genomeTO])
        return resp[0]

    def call_selenoproteins(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_selenoproteins',
                          [genomeTO])
        return resp[0]

    def call_pyrrolysoproteins(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_pyrrolysoproteins',
                          [genomeTO])
        return resp[0]

    def call_features_selenoprotein(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_features_selenoprotein',
                          [genomeTO])
        return resp[0]

    def call_features_pyrrolysoprotein(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_features_pyrrolysoprotein',
                          [genomeTO])
        return resp[0]

    def call_features_insertion_sequences(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_features_insertion_sequences',
                          [genomeTO])
        return resp[0]

    def call_features_rRNA_SEED(self, genome_in, types):
        resp = self._call('GenomeAnnotation.call_features_rRNA_SEED',
                          [genome_in, types])
        return resp[0]

    def call_features_tRNA_trnascan(self, genome_in):
        resp = self._call('GenomeAnnotation.call_features_tRNA_trnascan',
                          [genome_in])
        return resp[0]

    def call_RNAs(self, genome_in):
        resp = self._call('GenomeAnnotation.call_RNAs',
                          [genome_in])
        return resp[0]

    def call_features_CDS_glimmer3(self, genomeTO, params):
        resp = self._call('GenomeAnnotation.call_features_CDS_glimmer3',
                          [genomeTO, params])
        return resp[0]

    def call_features_CDS_prodigal(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_features_CDS_prodigal',
                          [genomeTO])
        return resp[0]

    def call_features_CDS_genemark(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_features_CDS_genemark',
                          [genomeTO])
        return resp[0]

    def call_features_CDS_SEED_projection(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_features_CDS_SEED_projection',
                          [genomeTO])
        return resp[0]

    def call_features_CDS_FragGeneScan(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_features_CDS_FragGeneScan',
                          [genomeTO])
        return resp[0]

    def call_features_repeat_region_SEED(self, genome_in, params):
        resp = self._call('GenomeAnnotation.call_features_repeat_region_SEED',
                          [genome_in, params])
        return resp[0]

    def call_features_prophage_phispy(self, genome_in):
        resp = self._call('GenomeAnnotation.call_features_prophage_phispy',
                          [genome_in])
        return resp[0]

    def call_features_scan_for_matches(self, genome_in, pattern, feature_type):
        resp = self._call('GenomeAnnotation.call_features_scan_for_matches',
                          [genome_in, pattern, feature_type])
        return resp[0]

    def annotate_proteins_similarity(self, genomeTO, params):
        resp = self._call('GenomeAnnotation.annotate_proteins_similarity',
                          [genomeTO, params])
        return resp[0]

    def annotate_proteins_kmer_v1(self, genomeTO, params):
        resp = self._call('GenomeAnnotation.annotate_proteins_kmer_v1',
                          [genomeTO, params])
        return resp[0]

    def annotate_proteins_kmer_v2(self, genome_in, params):
        resp = self._call('GenomeAnnotation.annotate_proteins_kmer_v2',
                          [genome_in, params])
        return resp[0]

    def resolve_overlapping_features(self, genome_in, params):
        resp = self._call('GenomeAnnotation.resolve_overlapping_features',
                          [genome_in, params])
        return resp[0]

    def call_features_ProtoCDS_kmer_v1(self, genomeTO, params):
        resp = self._call('GenomeAnnotation.call_features_ProtoCDS_kmer_v1',
                          [genomeTO, params])
        return resp[0]

    def call_features_ProtoCDS_kmer_v2(self, genome_in, params):
        resp = self._call('GenomeAnnotation.call_features_ProtoCDS_kmer_v2',
                          [genome_in, params])
        return resp[0]

    def enumerate_special_protein_databases(self):
        resp = self._call('GenomeAnnotation.enumerate_special_protein_databases',
                          [])
        return resp[0]

    def compute_special_proteins(self, genome_in, database_names):
        resp = self._call('GenomeAnnotation.compute_special_proteins',
                          [genome_in, database_names])
        return resp[0]

    def annotate_special_proteins(self, genome_in):
        resp = self._call('GenomeAnnotation.annotate_special_proteins',
                          [genome_in])
        return resp[0]

    def annotate_families_figfam_v1(self, genome_in):
        resp = self._call('GenomeAnnotation.annotate_families_figfam_v1',
                          [genome_in])
        return resp[0]

    def annotate_null_to_hypothetical(self, genome_in):
        resp = self._call('GenomeAnnotation.annotate_null_to_hypothetical',
                          [genome_in])
        return resp[0]

    def compute_cdd(self, genome_in):
        resp = self._call('GenomeAnnotation.compute_cdd',
                          [genome_in])
        return resp[0]

    def annotate_proteins(self, genomeTO):
        resp = self._call('GenomeAnnotation.annotate_proteins',
                          [genomeTO])
        return resp[0]

    def estimate_crude_phylogenetic_position_kmer(self, genomeTO):
        resp = self._call('GenomeAnnotation.estimate_crude_phylogenetic_position_kmer',
                          [genomeTO])
        return resp[0]

    def find_close_neighbors(self, genomeTO):
        resp = self._call('GenomeAnnotation.find_close_neighbors',
                          [genomeTO])
        return resp[0]

    def call_features_strep_suis_repeat(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_features_strep_suis_repeat',
                          [genomeTO])
        return resp[0]

    def call_features_strep_pneumo_repeat(self, genomeTO):
        resp = self._call('GenomeAnnotation.call_features_strep_pneumo_repeat',
                          [genomeTO])
        return resp[0]

    def call_features_crispr(self, genome_in):
        resp = self._call('GenomeAnnotation.call_features_crispr',
                          [genome_in])
        return resp[0]

    def update_functions(self, genome_in, functions, event):
        resp = self._call('GenomeAnnotation.update_functions',
                          [genome_in, functions, event])
        return resp[0]

    def renumber_features(self, genome_in):
        resp = self._call('GenomeAnnotation.renumber_features',
                          [genome_in])
        return resp[0]

    def export_genome(self, genome_in, format, feature_types):
        resp = self._call('GenomeAnnotation.export_genome',
                          [genome_in, format, feature_types])
        return resp[0]

    def enumerate_classifiers(self):
        resp = self._call('GenomeAnnotation.enumerate_classifiers',
                          [])
        return resp[0]

    def query_classifier_groups(self, classifier):
        resp = self._call('GenomeAnnotation.query_classifier_groups',
                          [classifier])
        return resp[0]

    def query_classifier_taxonomies(self, classifier):
        resp = self._call('GenomeAnnotation.query_classifier_taxonomies',
                          [classifier])
        return resp[0]

    def classify_into_bins(self, classifier, dna_input):
        resp = self._call('GenomeAnnotation.classify_into_bins',
                          [classifier, dna_input])
        return resp[0]

    def classify_full(self, classifier, dna_input):
        resp = self._call('GenomeAnnotation.classify_full',
                          [classifier, dna_input])
        return resp

    def default_workflow(self):
        resp = self._call('GenomeAnnotation.default_workflow',
                          [])
        return resp[0]

    def complete_workflow_template(self):
        resp = self._call('GenomeAnnotation.complete_workflow_template',
                          [])
        return resp[0]

    def run_pipeline(self, genome_in, workflow):
        resp = self._call('GenomeAnnotation.run_pipeline',
                          [genome_in, workflow])
        return resp[0]

    def pipeline_batch_start(self, genomes, workflow):
        resp = self._call('GenomeAnnotation.pipeline_batch_start',
                          [genomes, workflow])
        return resp[0]

    def pipeline_batch_status(self, batch_id):
        resp = self._call('GenomeAnnotation.pipeline_batch_status',
                          [batch_id])
        return resp[0]

    def pipeline_batch_enumerate_batches(self):
        resp = self._call('GenomeAnnotation.pipeline_batch_enumerate_batches',
                          [])
        return resp[0]
