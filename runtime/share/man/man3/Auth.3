.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio-KBase-Auth::lib::Bio::KBase::Auth 3"
.TH Bio-KBase-Auth::lib::Bio::KBase::Auth 3 "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Bio::KBase::Auth"
.IX Header "Bio::KBase::Auth"
OAuth based authentication for Bio::KBase::* libraries.
.PP
This is a helper class that stores shared configuration information.
.SS "Class Variables"
.IX Subsection "Class Variables"
.ie n .IP "\fB\fB$ConfPath\fB\fR" 4
.el .IP "\fB\f(CB$ConfPath\fB\fR" 4
.IX Item "$ConfPath"
The path to the \s-1INI\s0 formatted configuration file. Defaults to ~/.kbase_config, can be overriden by the shell environment variable \f(CW$KB_CLIENT_CONFIG\fR. Configuration directives for the Bio::KBase::Auth, Bio::KBase::AuthToken and Bio::KBase::AuthUser classes are loaded from the \*(L"authentication\*(R" section of the \s-1INI\s0 file.
.ie n .IP "\fB\fB%Conf\fB\fR" 4
.el .IP "\fB\f(CB%Conf\fB\fR" 4
.IX Item "%Conf"
A hash containing the full contents loaded from ConfPath (if any). This includes stuff outside of the authentication section.
.ie n .IP "\fB\fB%AuthConf\fB\fR" 4
.el .IP "\fB\f(CB%AuthConf\fB\fR" 4
.IX Item "%AuthConf"
A hash containing only the directives that begin with \*(L"authentication.\*(R" in \f(CW%Conf\fR
.ie n .IP "\fB\fB$VERSION\fB\fR" 4
.el .IP "\fB\f(CB$VERSION\fB\fR" 4
.IX Item "$VERSION"
The version of the libraries.
.ie n .IP "\fB\fB$AuthSvcHost\fB\fR" 4
.el .IP "\fB\f(CB$AuthSvcHost\fB\fR" 4
.IX Item "$AuthSvcHost"
A string specifying the base \s-1URL\s0 for the authentication and profile service. It defaults to \*(L"https://nexus.api.globusonline.org/\*(R". Set by 'authentication.servicehost' entry in .kbase_config
.ie n .IP "\fB\fB%AuthorizePath\fB\fR" 4
.el .IP "\fB\f(CB%AuthorizePath\fB\fR" 4
.IX Item "%AuthorizePath"
The path beneath \f(CW$AuthSvcHost\fR that supports authentication token requests, defaults to \*(L"/goauth/token\*(R". Set by 'authentication.authpath' in .kbase_config
.ie n .IP "\fB\fB$ProfilePath\fB\fR" 4
.el .IP "\fB\f(CB$ProfilePath\fB\fR" 4
.IX Item "$ProfilePath"
The path under \f(CW$AuthSvcHost\fR that returns user profile information, defaults to \*(L"users\*(R". Set by 'authentication.profilepath' in .kbase_config
.ie n .IP "\fB\fB$RoleSvcURL\fB\fR" 4
.el .IP "\fB\f(CB$RoleSvcURL\fB\fR" 4
.IX Item "$RoleSvcURL"
The \s-1URL\s0 used to query for roles/groups information, defaults to \*(L"https://kbase.us/services/authorization/Roles\*(R". Set by 'authentication.rolesvcurl' in .kbase_config
.ie n .IP "\fB\fB$MongoDB\fB\fR" 4
.el .IP "\fB\f(CB$MongoDB\fB\fR" 4
.IX Item "$MongoDB"
A MongoDB::Connection reference that can be activated by defining authentication.mongodb in the configuration file. The value of authentication.mongodb is passed in as the value of the host parameter in the MongoDB::Connection\->\fInew()\fR call. The MongoDB connection is used for access to server-side caching features and is not needed for normal operation.
.SS "Class Methods"
.IX Subsection "Class Methods"
.IP "\fBLoadConfig( [config path])\fR" 4
.IX Item "LoadConfig( [config path])"
Loads the default \s-1INI\s0 format file so that the class variables are updated to new values. If no file is passed in, then the default config file is used \- if a path is given then it is treated as an \s-1INI\s0 file and read, and class variables are updated accordingly.
.IP "\fBSetConfigs(%config)\fR" 4
.IX Item "SetConfigs(%config)"
This function takes a hash and uses the keys and values as settings to be updated in the \s-1INI\s0 file in \f(CW$ConfPath\fR. Values that are not passed into the hash are left unmolested. A hash key with an undef value will result in that setting being deleted from the \s-1INI\s0 file.
Keys must be an alphanumeric string beginning with an alphabetic character.
Values must be either a string(number) or an array reference of strings.
.Sp
The keys will be inserted into authentication section.
.IP "\fB\f(BIGetConfigs()\fB\fR" 4
.IX Item "GetConfigs()"
This function looks up the stashed kbase config file, and if it exists it pulls out the user_id and
token information and returns the info in a hash with keys 'user_id' and 'token' defined. If the user or
token is not set, then the values for 'user_id' and 'token' are set to the empty string.
